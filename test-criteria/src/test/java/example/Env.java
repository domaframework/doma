package example;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import javax.sql.DataSource;
import org.junit.jupiter.api.extension.AfterTestExecutionCallback;
import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;
import org.junit.jupiter.api.extension.ExtensionContext;
import org.junit.jupiter.api.extension.ParameterContext;
import org.junit.jupiter.api.extension.ParameterResolver;
import org.seasar.doma.jdbc.Config;
import org.seasar.doma.jdbc.Naming;
import org.seasar.doma.jdbc.dialect.Dialect;
import org.seasar.doma.jdbc.dialect.H2Dialect;
import org.seasar.doma.jdbc.tx.LocalTransaction;
import org.seasar.doma.jdbc.tx.LocalTransactionDataSource;
import org.seasar.doma.jdbc.tx.LocalTransactionManager;
import org.seasar.doma.jdbc.tx.TransactionManager;

public class Env
    implements BeforeTestExecutionCallback, AfterTestExecutionCallback, ParameterResolver {

  class DbConfig implements Config {
    private LocalTransactionDataSource dataSource = createDataSource();
    LocalTransaction localTransaction = dataSource.getLocalTransaction(getJdbcLogger());
    private TransactionManager transactionManager = new LocalTransactionManager(localTransaction);
    private Dialect dialect = new H2Dialect();

    @Override
    public DataSource getDataSource() {
      return dataSource;
    }

    @Override
    public Dialect getDialect() {
      return dialect;
    }

    @Override
    public TransactionManager getTransactionManager() {
      return transactionManager;
    }

    @Override
    public Naming getNaming() {
      return Naming.SNAKE_UPPER_CASE;
    }

    private LocalTransactionDataSource createDataSource() {
      return new LocalTransactionDataSource("jdbc:h2:mem:doma_it;DB_CLOSE_DELAY=-1", "sa", "");
    }
  }

  private DbConfig config = new DbConfig();

  @Override
  public void beforeTestExecution(ExtensionContext context) throws Exception {
    config
        .getTransactionManager()
        .required(
            () -> {
              try (Connection con = config.getDataSource().getConnection()) {
                try (Statement statement = con.createStatement()) {
                  statement.execute(initSql);
                }
              } catch (SQLException e) {
                throw new RuntimeException(e);
              }
            });
    config.localTransaction.begin();
    ;
  }

  public void afterTestExecution(ExtensionContext context) {
    config.localTransaction.rollback();
    config
        .getTransactionManager()
        .required(
            () -> {
              try (Connection con = config.getDataSource().getConnection()) {
                try (Statement statement = con.createStatement()) {
                  statement.execute("DROP ALL OBJECTS");
                }
              } catch (SQLException e) {
                throw new RuntimeException(e);
              }
            });
  }

  public boolean supportsParameter(
      ParameterContext parameterContext, ExtensionContext extensionContext) {
    return parameterContext.getParameter().getType() == Config.class;
  }

  public Object resolveParameter(
      ParameterContext parameterContext, ExtensionContext extensionContext) {
    return config;
  }

  private String initSql =
      "CREATE SEQUENCE SEQUENCE_STRATEGY_ID START WITH 1 INCREMENT BY 100;\n"
          + "CREATE SEQUENCE MY_SEQUENCE_STRATEGY_ID START WITH 1 INCREMENT BY 100;\n"
          + "CREATE SEQUENCE PERSON_ID_SEQUENCE START WITH 1 INCREMENT BY 100;\n"
          + "CREATE TABLE DEPARTMENT(DEPARTMENT_ID INTEGER NOT NULL PRIMARY KEY, DEPARTMENT_NO INTEGER NOT NULL UNIQUE,DEPARTMENT_NAME VARCHAR(20),LOCATION VARCHAR(20) DEFAULT 'TOKYO', VERSION INTEGER);\n"
          + "CREATE TABLE DEPARTMENT_ARCHIVE(DEPARTMENT_ID INTEGER NOT NULL PRIMARY KEY, DEPARTMENT_NO INTEGER NOT NULL UNIQUE,DEPARTMENT_NAME VARCHAR(20),LOCATION VARCHAR(20) DEFAULT 'TOKYO', VERSION INTEGER);\n"
          + "CREATE TABLE ADDRESS(ADDRESS_ID INTEGER NOT NULL PRIMARY KEY, STREET VARCHAR(20) UNIQUE, VERSION INTEGER);\n"
          + "CREATE TABLE EMPLOYEE(EMPLOYEE_ID INTEGER NOT NULL PRIMARY KEY, EMPLOYEE_NO INTEGER NOT NULL ,EMPLOYEE_NAME VARCHAR(20),MANAGER_ID INTEGER,HIREDATE DATE,SALARY NUMERIC(7,2),DEPARTMENT_ID INTEGER,ADDRESS_ID INTEGER,VERSION INTEGER, CONSTRAINT FK_DEPARTMENT_ID FOREIGN KEY(DEPARTMENT_ID) REFERENCES DEPARTMENT(DEPARTMENT_ID), CONSTRAINT FK_ADDRESS_ID FOREIGN KEY(ADDRESS_ID) REFERENCES ADDRESS(ADDRESS_ID));\n"
          + "CREATE TABLE PERSON(PERSON_ID INTEGER NOT NULL PRIMARY KEY, NAME VARCHAR(20), CREATED_AT TIMESTAMP, UPDATED_AT TIMESTAMP, VERSION INTEGER);\n"
          + "CREATE TABLE COMP_KEY_DEPARTMENT(DEPARTMENT_ID1 INTEGER NOT NULL, DEPARTMENT_ID2 INTEGER NOT NULL, DEPARTMENT_NO INTEGER NOT NULL UNIQUE,DEPARTMENT_NAME VARCHAR(20),LOCATION VARCHAR(20) DEFAULT 'TOKYO', VERSION INTEGER, CONSTRAINT PK_COMP_KEY_DEPARTMENT PRIMARY KEY(DEPARTMENT_ID1, DEPARTMENT_ID2));\n"
          + "CREATE TABLE COMP_KEY_ADDRESS(ADDRESS_ID1 INTEGER NOT NULL, ADDRESS_ID2 INTEGER NOT NULL, STREET VARCHAR(20), VERSION INTEGER, CONSTRAINT PK_COMP_KEY_ADDRESS PRIMARY KEY(ADDRESS_ID1, ADDRESS_ID2));\n"
          + "CREATE TABLE COMP_KEY_EMPLOYEE(EMPLOYEE_ID1 INTEGER NOT NULL, EMPLOYEE_ID2 INTEGER NOT NULL, EMPLOYEE_NO INTEGER NOT NULL ,EMPLOYEE_NAME VARCHAR(20),MANAGER_ID1 INTEGER,MANAGER_ID2 INTEGER,HIREDATE DATE,SALARY NUMERIC(7,2),DEPARTMENT_ID1 INTEGER,DEPARTMENT_ID2 INTEGER,ADDRESS_ID1 INTEGER,ADDRESS_ID2 INTEGER,VERSION INTEGER, CONSTRAINT PK_COMP_KEY_EMPLOYEE PRIMARY KEY(EMPLOYEE_ID1, EMPLOYEE_ID2), CONSTRAINT FK_COMP_KEY_DEPARTMENT_ID FOREIGN KEY(DEPARTMENT_ID1, DEPARTMENT_ID2) REFERENCES COMP_KEY_DEPARTMENT(DEPARTMENT_ID1, DEPARTMENT_ID2), CONSTRAINT FK_COMP_KEY_ADDRESS_ID FOREIGN KEY(ADDRESS_ID1, ADDRESS_ID2) REFERENCES COMP_KEY_ADDRESS(ADDRESS_ID1, ADDRESS_ID2));\n"
          + "CREATE TABLE LARGE_OBJECT(ID NUMERIC(8) NOT NULL PRIMARY KEY, NAME VARCHAR(20), LARGE_NAME CLOB, BYTES BINARY, LARGE_BYTES BLOB, DTO BINARY, LARGE_DTO BLOB);\n"
          + "CREATE TABLE TENSE (ID INTEGER PRIMARY KEY,DATE_DATE DATE, DATE_TIME TIME, DATE_TIMESTAMP TIMESTAMP, CAL_DATE DATE, CAL_TIME TIME, CAL_TIMESTAMP TIMESTAMP, SQL_DATE DATE, SQL_TIME TIME, SQL_TIMESTAMP TIMESTAMP);\n"
          + "CREATE TABLE JOB (ID INTEGER NOT NULL PRIMARY KEY, JOB_TYPE VARCHAR(20));\n"
          + "CREATE TABLE AUTHORITY (ID INTEGER NOT NULL PRIMARY KEY, AUTHORITY_TYPE INTEGER);\n"
          + "CREATE TABLE NO_ID (VALUE1 INTEGER, VALUE2 INTEGER);\n"
          + "CREATE TABLE OWNER_OF_NO_ID (ID INTEGER NOT NULL PRIMARY KEY, NO_ID_VALUE1 INTEGER);\n"
          + "CREATE TABLE CONSTRAINT_CHECKING (PRIMARY_KEY INTEGER PRIMARY KEY, UNIQUE_KEY INTEGER UNIQUE, FOREIGN_KEY INTEGER, CHECK_CONSTRAINT INTEGER, NOT_NULL INTEGER NOT NULL, CONSTRAINT CK_CONSTRAINT_CHECKING_1 CHECK (CHECK_CONSTRAINT > 0), CONSTRAINT FK_JOB_ID FOREIGN KEY (FOREIGN_KEY) REFERENCES JOB (ID));\n"
          + "CREATE TABLE PATTERN (VALUE VARCHAR(10));\n"
          + "CREATE TABLE ID_GENERATOR(PK VARCHAR(20) NOT NULL PRIMARY KEY, VALUE INTEGER NOT NULL);\n"
          + "CREATE TABLE MY_ID_GENERATOR(MY_PK VARCHAR(20) NOT NULL PRIMARY KEY, MY_VALUE INTEGER NOT NULL);\n"
          + "CREATE TABLE AUTO_STRATEGY(ID INTEGER NOT NULL IDENTITY PRIMARY KEY, VALUE VARCHAR(10));\n"
          + "CREATE TABLE IDENTITY_STRATEGY(ID INTEGER NOT NULL IDENTITY PRIMARY KEY, VALUE VARCHAR(10));\n"
          + "CREATE TABLE SEQUENCE_STRATEGY(ID INTEGER NOT NULL PRIMARY KEY, VALUE VARCHAR(10));\n"
          + "CREATE TABLE SEQUENCE_STRATEGY2(ID INTEGER NOT NULL PRIMARY KEY, VALUE VARCHAR(10));\n"
          + "CREATE TABLE TABLE_STRATEGY(ID INTEGER NOT NULL PRIMARY KEY, VALUE VARCHAR(10));\n"
          + "CREATE TABLE TABLE_STRATEGY2(ID INTEGER NOT NULL PRIMARY KEY, VALUE VARCHAR(10));\n"
          + "CREATE TABLE ANY_TEST(ID INTEGER NOT NULL PRIMARY KEY, VALUE OTHER);\n"
          + "CREATE TABLE BIG_DECIMAL_TEST(ID INTEGER NOT NULL PRIMARY KEY, VALUE BIGINT);\n"
          + "CREATE TABLE BIG_INTEGER_TEST(ID INTEGER NOT NULL PRIMARY KEY, VALUE BIGINT);\n"
          + "CREATE TABLE BOOLEAN_TEST(ID INTEGER NOT NULL PRIMARY KEY, VALUE BOOL);\n"
          + "CREATE TABLE BYTE_TEST(ID INTEGER NOT NULL PRIMARY KEY, VALUE TINYINT);\n"
          + "CREATE TABLE BYTE_ARRAY_TEST(ID INTEGER NOT NULL PRIMARY KEY, VALUE BINARY);\n"
          + "CREATE TABLE DOUBLE_TEST(ID INTEGER NOT NULL PRIMARY KEY, VALUE DOUBLE);\n"
          + "CREATE TABLE ENUM_TEST(ID INTEGER NOT NULL PRIMARY KEY, VALUE VARCHAR(20));\n"
          + "CREATE TABLE FLOAT_TEST(ID INTEGER NOT NULL PRIMARY KEY, VALUE FLOAT);\n"
          + "CREATE TABLE INT_TEST(ID INTEGER NOT NULL PRIMARY KEY, VALUE INTEGER);\n"
          + "CREATE TABLE LOCAL_DATE_TIME_TEST(ID INTEGER NOT NULL PRIMARY KEY, VALUE TIMESTAMP);\n"
          + "CREATE TABLE LOCAL_DATE_TEST(ID INTEGER NOT NULL PRIMARY KEY, VALUE DATE);\n"
          + "CREATE TABLE LOCAL_TIME_TEST(ID INTEGER NOT NULL PRIMARY KEY, VALUE TIME);\n"
          + "CREATE TABLE LONG_TEST(ID INTEGER NOT NULL PRIMARY KEY, VALUE BIGINT);\n"
          + "CREATE TABLE OFFSET_DATE_TIME_TEST(ID INTEGER NOT NULL PRIMARY KEY, VALUE TIMESTAMP WITH TIME ZONE);\n"
          + "CREATE TABLE SHORT_TEST(ID INTEGER NOT NULL PRIMARY KEY, VALUE SMALLINT);\n"
          + "CREATE TABLE STRING_TEST(ID INTEGER NOT NULL PRIMARY KEY, VALUE VARCHAR(20));\n"
          + "CREATE TABLE DEPT(DEPARTMENT_ID INTEGER NOT NULL PRIMARY KEY, DEPARTMENT_NAME VARCHAR(20), VERSION INTEGER);\n"
          + "CREATE TABLE EMP(EMPLOYEE_ID INTEGER NOT NULL PRIMARY KEY, EMPLOYEE_NAME VARCHAR(20),MANAGER_ID INTEGER,DEPARTMENT_ID INTEGER,VERSION INTEGER, CONSTRAINT FK_DEPT_ID FOREIGN KEY(DEPARTMENT_ID) REFERENCES DEPT(DEPARTMENT_ID));\n"
          + "INSERT INTO DEPT VALUES(1,'ACCOUNTING',1);\n"
          + "INSERT INTO DEPT VALUES(2,'RESEARCH',1);\n"
          + "INSERT INTO DEPT VALUES(3,'SALES',1);\n"
          + "INSERT INTO DEPT VALUES(4,'OPERATIONS',1);\n"
          + "INSERT INTO EMP VALUES(1,'SMITH',3,2,1);\n"
          + "INSERT INTO EMP VALUES(2,'ALLEN',6,3,1);\n"
          + "INSERT INTO EMP VALUES(3,'WARD',6,3,1);\n"
          + "INSERT INTO EMP VALUES(4,'JONES',9,2,1);\n"
          + "INSERT INTO EMP VALUES(5,'MARTIN',6,3,1);\n"
          + "INSERT INTO EMP VALUES(6,'BLAKE',9,3,1);\n"
          + "INSERT INTO EMP VALUES(7,'CLARK',9,1,1);\n"
          + "INSERT INTO EMP VALUES(8,'SCOTT',4,2,1);\n"
          + "INSERT INTO EMP VALUES(9,'KING',NULL,1,1);\n"
          + "INSERT INTO EMP VALUES(10,'TURNER',6,3,1);\n"
          + "INSERT INTO DEPARTMENT VALUES(1,10,'ACCOUNTING','NEW YORK',1);\n"
          + "INSERT INTO DEPARTMENT VALUES(2,20,'RESEARCH','DALLAS',1);\n"
          + "INSERT INTO DEPARTMENT VALUES(3,30,'SALES','CHICAGO',1);\n"
          + "INSERT INTO DEPARTMENT VALUES(4,40,'OPERATIONS','BOSTON',1);\n"
          + "INSERT INTO ADDRESS VALUES(1,'STREET 1',1);\n"
          + "INSERT INTO ADDRESS VALUES(2,'STREET 2',1);\n"
          + "INSERT INTO ADDRESS VALUES(3,'STREET 3',1);\n"
          + "INSERT INTO ADDRESS VALUES(4,'STREET 4',1);\n"
          + "INSERT INTO ADDRESS VALUES(5,'STREET 5',1);\n"
          + "INSERT INTO ADDRESS VALUES(6,'STREET 6',1);\n"
          + "INSERT INTO ADDRESS VALUES(7,'STREET 7',1);\n"
          + "INSERT INTO ADDRESS VALUES(8,'STREET 8',1);\n"
          + "INSERT INTO ADDRESS VALUES(9,'STREET 9',1);\n"
          + "INSERT INTO ADDRESS VALUES(10,'STREET 10',1);\n"
          + "INSERT INTO ADDRESS VALUES(11,'STREET 11',1);\n"
          + "INSERT INTO ADDRESS VALUES(12,'STREET 12',1);\n"
          + "INSERT INTO ADDRESS VALUES(13,'STREET 13',1);\n"
          + "INSERT INTO ADDRESS VALUES(14,'STREET 14',1);\n"
          + "INSERT INTO ADDRESS VALUES(15,'STREET 15',1);\n"
          + "INSERT INTO EMPLOYEE VALUES(1,7369,'SMITH',13,'1980-12-17',800,2,1,1);\n"
          + "INSERT INTO EMPLOYEE VALUES(2,7499,'ALLEN',6,'1981-02-20',1600,3,2,1);\n"
          + "INSERT INTO EMPLOYEE VALUES(3,7521,'WARD',6,'1981-02-22',1250,3,3,1);\n"
          + "INSERT INTO EMPLOYEE VALUES(4,7566,'JONES',9,'1981-04-02',2975,2,4,1);\n"
          + "INSERT INTO EMPLOYEE VALUES(5,7654,'MARTIN',6,'1981-09-28',1250,3,5,1);\n"
          + "INSERT INTO EMPLOYEE VALUES(6,7698,'BLAKE',9,'1981-05-01',2850,3,6,1);\n"
          + "INSERT INTO EMPLOYEE VALUES(7,7782,'CLARK',9,'1981-06-09',2450,1,7,1);\n"
          + "INSERT INTO EMPLOYEE VALUES(8,7788,'SCOTT',4,'1982-12-09',3000.0,2,8,1);\n"
          + "INSERT INTO EMPLOYEE VALUES(9,7839,'KING',NULL,'1981-11-17',5000,1,9,1);\n"
          + "INSERT INTO EMPLOYEE VALUES(10,7844,'TURNER',6,'1981-09-08',1500,3,10,1);\n"
          + "INSERT INTO EMPLOYEE VALUES(11,7876,'ADAMS',8,'1983-01-12',1100,2,11,1);\n"
          + "INSERT INTO EMPLOYEE VALUES(12,7900,'JAMES',6,'1981-12-03',950,3,12,1);\n"
          + "INSERT INTO EMPLOYEE VALUES(13,7902,'FORD',4,'1981-12-03',3000,2,13,1);\n"
          + "INSERT INTO EMPLOYEE VALUES(14,7934,'MILLER',7,'1982-01-23',1300,1,14,1);\n"
          + "INSERT INTO COMP_KEY_DEPARTMENT VALUES(1,1,10,'ACCOUNTING','NEW YORK',1);\n"
          + "INSERT INTO COMP_KEY_DEPARTMENT VALUES(2,2,20,'RESEARCH','DALLAS',1);\n"
          + "INSERT INTO COMP_KEY_DEPARTMENT VALUES(3,3,30,'SALES','CHICAGO',1);\n"
          + "INSERT INTO COMP_KEY_DEPARTMENT VALUES(4,4,40,'OPERATIONS','BOSTON',1);\n"
          + "INSERT INTO COMP_KEY_ADDRESS VALUES(1,1,'STREET 1',1);\n"
          + "INSERT INTO COMP_KEY_ADDRESS VALUES(2,2,'STREET 2',1);\n"
          + "INSERT INTO COMP_KEY_ADDRESS VALUES(3,3,'STREET 3',1);\n"
          + "INSERT INTO COMP_KEY_ADDRESS VALUES(4,4,'STREET 4',1);\n"
          + "INSERT INTO COMP_KEY_ADDRESS VALUES(5,5,'STREET 5',1);\n"
          + "INSERT INTO COMP_KEY_ADDRESS VALUES(6,6,'STREET 6',1);\n"
          + "INSERT INTO COMP_KEY_ADDRESS VALUES(7,7,'STREET 7',1);\n"
          + "INSERT INTO COMP_KEY_ADDRESS VALUES(8,8,'STREET 8',1);\n"
          + "INSERT INTO COMP_KEY_ADDRESS VALUES(9,9,'STREET 9',1);\n"
          + "INSERT INTO COMP_KEY_ADDRESS VALUES(10,10,'STREET 10',1);\n"
          + "INSERT INTO COMP_KEY_ADDRESS VALUES(11,11,'STREET 11',1);\n"
          + "INSERT INTO COMP_KEY_ADDRESS VALUES(12,12,'STREET 12',1);\n"
          + "INSERT INTO COMP_KEY_ADDRESS VALUES(13,13,'STREET 13',1);\n"
          + "INSERT INTO COMP_KEY_ADDRESS VALUES(14,14,'STREET 14',1);\n"
          + "INSERT INTO COMP_KEY_EMPLOYEE VALUES(1,1,7369,'SMITH',13,13,'1980-12-17',800,2,2,1,1,1);\n"
          + "INSERT INTO COMP_KEY_EMPLOYEE VALUES(2,2,7499,'ALLEN',6,6,'1981-02-20',1600,3,3,2,2,1);\n"
          + "INSERT INTO COMP_KEY_EMPLOYEE VALUES(3,3,7521,'WARD',6,6,'1981-02-22',1250,3,3,3,3,1);\n"
          + "INSERT INTO COMP_KEY_EMPLOYEE VALUES(4,4,7566,'JONES',9,9,'1981-04-02',2975,2,2,4,4,1);\n"
          + "INSERT INTO COMP_KEY_EMPLOYEE VALUES(5,5,7654,'MARTIN',6,6,'1981-09-28',1250,3,3,5,5,1);\n"
          + "INSERT INTO COMP_KEY_EMPLOYEE VALUES(6,6,7698,'BLAKE',9,9,'1981-05-01',2850,3,3,6,6,1);\n"
          + "INSERT INTO COMP_KEY_EMPLOYEE VALUES(7,7,7782,'CLARK',9,9,'1981-06-09',2450,1,1,7,7,1);\n"
          + "INSERT INTO COMP_KEY_EMPLOYEE VALUES(8,8,7788,'SCOTT',4,4,'1982-12-09',3000.0,2,2,8,8,1);\n"
          + "INSERT INTO COMP_KEY_EMPLOYEE VALUES(9,9,7839,'KING',NULL,NULL,'1981-11-17',5000,1,1,9,9,1);\n"
          + "INSERT INTO COMP_KEY_EMPLOYEE VALUES(10,10,7844,'TURNER',6,6,'1981-09-08',1500,3,3,10,10,1);\n"
          + "INSERT INTO COMP_KEY_EMPLOYEE VALUES(11,11,7876,'ADAMS',8,8,'1983-01-12',1100,2,2,11,11,1);\n"
          + "INSERT INTO COMP_KEY_EMPLOYEE VALUES(12,12,7900,'JAMES',6,6,'1981-12-03',950,3,3,12,12,1);\n"
          + "INSERT INTO COMP_KEY_EMPLOYEE VALUES(13,13,7902,'FORD',4,4,'1981-12-03',3000,2,2,13,13,1);\n"
          + "INSERT INTO COMP_KEY_EMPLOYEE VALUES(14,14,7934,'MILLER',7,7,'1982-01-23',1300,1,1,14,14,1);\n"
          + "INSERT INTO TENSE VALUES (1, '2005-02-14', '12:11:10', '2005-02-14 12:11:10', '2005-02-14', '12:11:10', '2005-02-14 12:11:10', '2005-02-14', '12:11:10', '2005-02-14 12:11:10');\n"
          + "INSERT INTO JOB VALUES (1, 'SALESMAN');\n"
          + "INSERT INTO JOB VALUES (2, 'MANAGER');\n"
          + "INSERT INTO JOB VALUES (3, 'PRESIDENT');\n"
          + "INSERT INTO AUTHORITY VALUES (1, 10);\n"
          + "INSERT INTO AUTHORITY VALUES (2, 20);\n"
          + "INSERT INTO AUTHORITY VALUES (3, 30);\n"
          + "INSERT INTO NO_ID VALUES (1, 1);\n"
          + "INSERT INTO NO_ID VALUES (1, 1);\n"
          + "INSERT INTO ID_GENERATOR VALUES('TABLE_STRATEGY_ID', 1);";
}
