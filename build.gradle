apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven-publish'

group = 'org.seasar.doma'
version = '2.0-beta-6'
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
ext.encoding = 'UTF-8'
sourceCompatibility = jdkVersion
targetCompatibility = jdkVersion

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.3'
    }
}

apply plugin: 'bintray'

bintray {
    user = bintrayUser
    key = bintrayApiKey
    publications = [ 'mavenJava'  ]
    pkg {
        repo = 'maven'
        userOrg = 'domaframework'
        name = 'doma'
        licenses = [ 'Apache-2.0' ]
    }
    dryRun = false
}

compileJava {
    doFirst {
        ant.replaceregexp(
            match: /(private static final String VERSION = ")[^"]*(")/,
            replace: "\\1${version}\\2",
            encoding: encoding, 
            flags: 'g') {
                fileset(dir: '.') {
                    include(name: '**/Artifact.java')
                }
            }
        ant.replaceregexp(
            match: /("org.seasar.doma:doma:)[^"]*(")/,
            replace: "\\1${version}\\2",
            encoding: encoding, 
            flags: 'g') {
                fileset(dir: 'docs/sources') {
                    include(name: '**/*.rst')
                }
            }
    }
    options.encoding = encoding
}

compileTestJava {
    options.encoding = encoding
    options.compilerArgs = ['-proc:none']
}

test {
    maxHeapSize = '1g'
}

javadoc {
    options.encoding = encoding
    options.charSet = encoding
    options.docEncoding = encoding
    exclude '**/internal/**'
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Doma', 'Implementation-Version': version
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}

repositories {
    mavenCentral()
    maven {url 'http://maven.seasar.org/maven2'}
}

dependencies {
    testCompile 'org.seasar.aptina:aptina-unit:1.0.0'
}

task sourcesJar (type : Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar (type : Jar, dependsOn : javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

task gpg(dependsOn: bintrayUpload ) << {
    def uri = "https://api.bintray.com/gpg/domaframework/maven/doma/versions/$version"
    def client = new groovyx.net.http.RESTClient(uri)
    client.auth.basic(bintrayUser, bintrayApiKey)
    println "Executing a request to '$uri'"
    def response = client.post([
        requestContentType: groovyx.net.http.ContentType.JSON,
        body: "{ \"passphrase\": \"$bintrayPassphrase\" }"
    ])
    println "Received response: ${response.getData()}"
}

def pomConfig = {
    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/license/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }
    scm {
        url githubUrl
        connection "scm:git:${githubUrl}"
        developerConnection "scm:git:${githubUrl}"
    }
    developers {
        developer {
            id 'nakamura-to'
            name 'Toshihiro Nakamura'
            email 'toshihiro.nakamura@gmail.com'
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom.withXml {
                def root = asNode()
                root.appendNode( 'name', project.name )
                root.appendNode( 'description', 'Domain Oriented Database Mapping Framework for Java 8' )
                root.appendNode( 'url', projectUrl )
                root.children().last() + pomConfig
            }
        }
    }
}

apply from:'eclipse.gradle'

