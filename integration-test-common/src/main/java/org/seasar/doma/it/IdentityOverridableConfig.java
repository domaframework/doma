/*
 * Copyright Doma Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.seasar.doma.it;

import java.sql.ResultSet;
import java.sql.SQLException;
import javax.sql.DataSource;
import org.seasar.doma.expr.ExpressionFunctions;
import org.seasar.doma.jdbc.ClassHelper;
import org.seasar.doma.jdbc.CommandImplementors;
import org.seasar.doma.jdbc.Commenter;
import org.seasar.doma.jdbc.Config;
import org.seasar.doma.jdbc.DuplicateColumnHandler;
import org.seasar.doma.jdbc.EntityListenerProvider;
import org.seasar.doma.jdbc.JdbcLogger;
import org.seasar.doma.jdbc.JdbcMappingVisitor;
import org.seasar.doma.jdbc.MapKeyNaming;
import org.seasar.doma.jdbc.Naming;
import org.seasar.doma.jdbc.QueryImplementors;
import org.seasar.doma.jdbc.RequiresNewController;
import org.seasar.doma.jdbc.ScriptBlockContext;
import org.seasar.doma.jdbc.ScriptFileLoader;
import org.seasar.doma.jdbc.SelectForUpdateType;
import org.seasar.doma.jdbc.SelectOptions;
import org.seasar.doma.jdbc.Sql;
import org.seasar.doma.jdbc.SqlBuilderSettings;
import org.seasar.doma.jdbc.SqlFileRepository;
import org.seasar.doma.jdbc.SqlLogFormattingVisitor;
import org.seasar.doma.jdbc.SqlLogType;
import org.seasar.doma.jdbc.SqlNode;
import org.seasar.doma.jdbc.UnknownColumnHandler;
import org.seasar.doma.jdbc.criteria.query.CriteriaBuilder;
import org.seasar.doma.jdbc.dialect.Dialect;
import org.seasar.doma.jdbc.id.AutoGeneratedKeysType;
import org.seasar.doma.jdbc.query.MultiInsertAssembler;
import org.seasar.doma.jdbc.query.MultiInsertAssemblerContext;
import org.seasar.doma.jdbc.query.UpsertAssembler;
import org.seasar.doma.jdbc.query.UpsertAssemblerContext;
import org.seasar.doma.jdbc.statistic.StatisticManager;
import org.seasar.doma.jdbc.tx.TransactionManager;
import org.seasar.doma.jdbc.type.JdbcType;

public class IdentityOverridableConfig implements Config {

  private final Config delegate;

  public IdentityOverridableConfig(Config delegate) {
    this.delegate = delegate;
  }

  @Override
  public DataSource getDataSource() {
    return delegate.getDataSource();
  }

  @Override
  public Dialect getDialect() {
    return new IdentityOverridableDialect(delegate.getDialect());
  }

  @Override
  public String getDataSourceName() {
    return delegate.getDataSourceName();
  }

  @Override
  public SqlFileRepository getSqlFileRepository() {
    return delegate.getSqlFileRepository();
  }

  @Override
  public ScriptFileLoader getScriptFileLoader() {
    return delegate.getScriptFileLoader();
  }

  @Override
  public JdbcLogger getJdbcLogger() {
    return delegate.getJdbcLogger();
  }

  @Override
  public RequiresNewController getRequiresNewController() {
    return delegate.getRequiresNewController();
  }

  @Override
  public ClassHelper getClassHelper() {
    return delegate.getClassHelper();
  }

  @Override
  public CommandImplementors getCommandImplementors() {
    return delegate.getCommandImplementors();
  }

  @Override
  public QueryImplementors getQueryImplementors() {
    return delegate.getQueryImplementors();
  }

  @Override
  public SqlLogType getExceptionSqlLogType() {
    return delegate.getExceptionSqlLogType();
  }

  @Override
  public UnknownColumnHandler getUnknownColumnHandler() {
    return delegate.getUnknownColumnHandler();
  }

  @Override
  public DuplicateColumnHandler getDuplicateColumnHandler() {
    return delegate.getDuplicateColumnHandler();
  }

  @Override
  public Naming getNaming() {
    return delegate.getNaming();
  }

  @Override
  public MapKeyNaming getMapKeyNaming() {
    return delegate.getMapKeyNaming();
  }

  @Override
  public TransactionManager getTransactionManager() {
    return delegate.getTransactionManager();
  }

  @Override
  public Commenter getCommenter() {
    return delegate.getCommenter();
  }

  @Override
  public int getMaxRows() {
    return delegate.getMaxRows();
  }

  @Override
  public int getFetchSize() {
    return delegate.getFetchSize();
  }

  @Override
  public int getQueryTimeout() {
    return delegate.getQueryTimeout();
  }

  @Override
  public int getBatchSize() {
    return delegate.getBatchSize();
  }

  @Override
  public EntityListenerProvider getEntityListenerProvider() {
    return delegate.getEntityListenerProvider();
  }

  @Override
  public SqlBuilderSettings getSqlBuilderSettings() {
    return delegate.getSqlBuilderSettings();
  }

  @Override
  public StatisticManager getStatisticManager() {
    return delegate.getStatisticManager();
  }
}

class IdentityOverridableDialect implements Dialect {

  private final Dialect delegate;

  public IdentityOverridableDialect(Dialect delegate) {
    this.delegate = delegate;
  }

  @Override
  public String getName() {
    return delegate.getName();
  }

  @Override
  public SqlNode transformSelectSqlNode(SqlNode sqlNode, SelectOptions options) {
    return delegate.transformSelectSqlNode(sqlNode, options);
  }

  @Override
  public SqlNode transformSelectSqlNodeForGettingCount(SqlNode sqlNode) {
    return delegate.transformSelectSqlNodeForGettingCount(sqlNode);
  }

  @Override
  public boolean isUniqueConstraintViolated(SQLException sqlException) {
    return delegate.isUniqueConstraintViolated(sqlException);
  }

  @Override
  public boolean includesIdentityColumn() {
    return delegate.includesIdentityColumn();
  }

  @Override
  public boolean includesIdentityColumn(Object idValue) {
    return idValue != null;
  }

  @Override
  public boolean supportsIdentity() {
    return delegate.supportsIdentity();
  }

  @Override
  public boolean supportsSequence() {
    return delegate.supportsSequence();
  }

  @Override
  public boolean supportsAutoGeneratedKeys() {
    return delegate.supportsAutoGeneratedKeys();
  }

  @Override
  public boolean supportsBatchUpdateResults() {
    return delegate.supportsBatchUpdateResults();
  }

  @Override
  public boolean supportsBatchExecutionReturningGeneratedValues() {
    return delegate.supportsBatchExecutionReturningGeneratedValues();
  }

  @Override
  public boolean supportsSelectForUpdate(SelectForUpdateType type, boolean withTargets) {
    return delegate.supportsSelectForUpdate(type, withTargets);
  }

  @Override
  public boolean supportsResultSetReturningAsOutParameter() {
    return delegate.supportsResultSetReturningAsOutParameter();
  }

  @Deprecated
  @Override
  public boolean supportsIdentityReservation() {
    return delegate.supportsIdentityReservation();
  }

  @Override
  public boolean supportsAliasInDeleteClause() {
    return delegate.supportsAliasInDeleteClause();
  }

  @Override
  public boolean supportsAliasInDeleteStatement() {
    return delegate.supportsAliasInDeleteStatement();
  }

  @Override
  public boolean supportsAliasInUpdateClause() {
    return delegate.supportsAliasInUpdateClause();
  }

  @Override
  public boolean supportsAliasInUpdateStatement() {
    return delegate.supportsAliasInUpdateStatement();
  }

  @Override
  public boolean supportsModOperator() {
    return delegate.supportsModOperator();
  }

  @Override
  public boolean supportsMultiRowInsertStatement() {
    return delegate.supportsMultiRowInsertStatement();
  }

  @Override
  public boolean supportsAutoIncrementWhenInsertingMultipleRows() {
    return delegate.supportsAutoIncrementWhenInsertingMultipleRows();
  }

  @Override
  public boolean supportsUpsertEmulationWithMergeStatement() {
    return delegate.supportsUpsertEmulationWithMergeStatement();
  }

  @Override
  public boolean supportsParenthesesForSetOperands() {
    return delegate.supportsParenthesesForSetOperands();
  }

  @Override
  public Sql<?> getIdentitySelectSql(
      String catalogName,
      String schemaName,
      String tableName,
      String columnName,
      boolean isQuoteRequired,
      boolean isIdColumnQuoteRequired) {
    return delegate.getIdentitySelectSql(
        catalogName, schemaName, tableName, columnName, isQuoteRequired, isIdColumnQuoteRequired);
  }

  @Deprecated
  @Override
  public Sql<?> getIdentityReservationSql(
      String catalogName,
      String schemaName,
      String tableName,
      String columnName,
      boolean isQuoteRequired,
      boolean isIdColumnQuoteRequired,
      int reservationSize) {
    return delegate.getIdentityReservationSql(
        catalogName,
        schemaName,
        tableName,
        columnName,
        isQuoteRequired,
        isIdColumnQuoteRequired,
        reservationSize);
  }

  @Override
  public Sql<?> getSequenceNextValSql(String qualifiedSequenceName, long allocationSize) {
    return delegate.getSequenceNextValSql(qualifiedSequenceName, allocationSize);
  }

  @Override
  public JdbcType<ResultSet> getResultSetType() {
    return delegate.getResultSetType();
  }

  @Override
  public String applyQuote(String name) {
    return delegate.applyQuote(name);
  }

  @Override
  public String removeQuote(String name) {
    return delegate.removeQuote(name);
  }

  @Override
  public Throwable getRootCause(SQLException sqlException) {
    return delegate.getRootCause(sqlException);
  }

  @Override
  public JdbcMappingVisitor getJdbcMappingVisitor() {
    return delegate.getJdbcMappingVisitor();
  }

  @Override
  public SqlLogFormattingVisitor getSqlLogFormattingVisitor() {
    return delegate.getSqlLogFormattingVisitor();
  }

  @Override
  public ExpressionFunctions getExpressionFunctions() {
    return delegate.getExpressionFunctions();
  }

  @Override
  public ScriptBlockContext createScriptBlockContext() {
    return delegate.createScriptBlockContext();
  }

  @Override
  public String getScriptBlockDelimiter() {
    return delegate.getScriptBlockDelimiter();
  }

  @Override
  public AutoGeneratedKeysType getAutoGeneratedKeysType() {
    return delegate.getAutoGeneratedKeysType();
  }

  @Override
  public CriteriaBuilder getCriteriaBuilder() {
    return delegate.getCriteriaBuilder();
  }

  @Override
  public UpsertAssembler getUpsertAssembler(UpsertAssemblerContext context) {
    return delegate.getUpsertAssembler(context);
  }

  @Override
  public <ENTITY> MultiInsertAssembler getMultiInsertAssembler(
      MultiInsertAssemblerContext<ENTITY> context) {
    return delegate.getMultiInsertAssembler(context);
  }
}
