
msgid ""
msgstr ""
"Project-Id-Version:  doma-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-12 01:18+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language: ja_JP\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../criteria-api.md:1
msgid "Classic Criteria API"
msgstr ""

#: ../../criteria-api.md:2
msgid "Contents"
msgstr "コンテンツ"

#: ../../criteria-api.md:7
msgid "Introduction"
msgstr "イントロダクション"

#: ../../criteria-api.md:10
#, fuzzy, python-brace-format
msgid ""
"Please use the Query DSL introduced on the {doc}`query-dsl` page instead "
"of the Entityql and NativeSql DSLs explained here. The Query DSL is a "
"new, unified interface that combines both Entityql and NativeSql DSLs."
msgstr ""
"ここで説明する Entityql と NativeSql DSL の代わりに :doc:`query-dsl` のページで紹介する Query "
"DSL を使用してください。 Query DSLは、EntityqlとNativeSql "
"DSLの両方を組み合わせた新しい統合インターフェイスです。"

#: ../../criteria-api.md:15
msgid "There are two kinds of DSLs in the Criteria API:"
msgstr "Criteria API には 2 種類の DSL があります。"

#: ../../criteria-api.md:17
msgid "The Entityql DSL"
msgstr "Entityql DSL"

#: ../../criteria-api.md:18
msgid "The NativeSql DSL"
msgstr "NativeSql DSL"

#: ../../criteria-api.md:20
msgid "Both requires predefined Entity classes and metamodel classes."
msgstr "どちらも、事前定義されたエンティティクラスとメタモデルクラスを必要とします。"

#: ../../criteria-api.md:22
msgid "We use the following Entity classes to show you some examples:"
msgstr "次のエンティティクラスを使用して、いくつかの例を示します。"

#: ../../criteria-api.md:98
#, fuzzy
msgid ""
"Note that the above classes are annotated with `@Entity(metamodel = "
"@Metamodel)`. The `metamodel = @Metamodel` indicates that the annotated "
"entity has a corresponding metamodel class generated by Doma's annotation"
" processor ."
msgstr ""
"上記のクラスには ``@Entity(metamodel = @Metamodel)`` "
"というアノテーションが付けられていることに注意してください。 ``metamodel = @Metamodel`` "
"は、エンティティクラスに対応するメタモデルクラスをDoma の アノテーションプロセッサー により生成することを示します。"

#: ../../criteria-api.md:102
#, fuzzy
msgid ""
"In our examples, the metamodel classes are `Employee_`, `Department_`, "
"`Emp_` and `Dept_`. These metamodels allow you to make your query "
"typesafe."
msgstr ""
"この例では、メタモデルクラスは ``Employee_``、``Department_``、``Emp_``、および ``Dept_`` "
"です。これらのメタモデルクラスを使用すると、クエリをタイプセーフに構築できます。"

#: ../../criteria-api.md:105
msgid ""
"You can customize the name of the metamodels by the Metamodel annotation "
"elements."
msgstr "メタモデルの名前は、メタモデルのアノテーション要素によってカスタマイズできます。"

#: ../../criteria-api.md:107
#, fuzzy, python-brace-format
msgid ""
"To customize all metamodels in bulk, you can use the annotation processor"
" options. See {doc}`annotation-processing` and check the following "
"options:"
msgstr ""
"すべてのメタモデルを一括でカスタマイズするには、アノテーションプロセッサのオプションを使用できます。 :doc:`annotation-"
"processing` を参照して、次のオプションを確認してください。"

#: ../../criteria-api.md:110
msgid "doma.metamodel.enabled"
msgstr ""

#: ../../criteria-api.md:111
msgid "doma.metamodel.prefix"
msgstr "doma.metamodel.prefix"

#: ../../criteria-api.md:112
msgid "doma.metamodel.suffix"
msgstr "doma.metamodel.suffix"

#: ../../criteria-api.md:114
msgid "Entityql DSL"
msgstr ""

#: ../../criteria-api.md:116
#, fuzzy
msgid ""
"The Entityql DSL can query and associate entities. The entry point is the"
" `org.seasar.doma.jdbc.criteria.Entityql` class. This class has the "
"following methods:"
msgstr ""
"Entityql DSL は、エンティティをクエリして関連付けることができます。エントリポイントは "
"``org.seasar.doma.jdbc.criteria.Entityql`` クラスです。このクラスには次のメソッドがあります。"

#: ../../criteria-api.md:120 ../../criteria-api.md:170
msgid "from"
msgstr ""

#: ../../criteria-api.md:121 ../../criteria-api.md:172
msgid "insert"
msgstr "insert"

#: ../../criteria-api.md:122 ../../criteria-api.md:171
msgid "delete"
msgstr "delete"

#: ../../criteria-api.md:123 ../../criteria-api.md:173
msgid "update"
msgstr "update"

#: ../../criteria-api.md:125
#, fuzzy
msgid "You can instantiate the `Entityql` class as follows:"
msgstr "次のように ``Entityql`` クラスをインスタンス化できます。"

#: ../../criteria-api.md:131
#, fuzzy
msgid ""
"For example, to query `Employee` and `Department` entities and associate "
"them, write as follows:"
msgstr ""
"たとえば、 ``Employee`` エンティティと ``Department`` "
"エンティティをクエリしてそれらを関連付けるには、次のように記述します。"

#: ../../criteria-api.md:152 ../../criteria-api.md:198
#: ../../criteria-api.md:357 ../../criteria-api.md:381
#: ../../criteria-api.md:406 ../../criteria-api.md:430
#: ../../criteria-api.md:445 ../../criteria-api.md:473
#: ../../criteria-api.md:539 ../../criteria-api.md:562
#: ../../criteria-api.md:626 ../../criteria-api.md:645
#: ../../criteria-api.md:680 ../../criteria-api.md:735
#: ../../criteria-api.md:838 ../../criteria-api.md:853
#: ../../criteria-api.md:901 ../../criteria-api.md:942
#: ../../criteria-api.md:969 ../../criteria-api.md:987
#: ../../criteria-api.md:1013 ../../criteria-api.md:1043
#: ../../criteria-api.md:1136 ../../criteria-api.md:1208
#: ../../criteria-api.md:1237 ../../criteria-api.md:1309
#: ../../criteria-api.md:1340 ../../criteria-api.md:1390
#: ../../criteria-api.md:1414 ../../criteria-api.md:1537
#: ../../criteria-api.md:1578 ../../criteria-api.md:1619
#: ../../criteria-api.md:1651 ../../criteria-api.md:1671
#: ../../criteria-api.md:1708 ../../criteria-api.md:1750
#: ../../criteria-api.md:1793 ../../criteria-api.md:1832
msgid "The above query issues the following SQL statement:"
msgstr "上記のクエリは次の SQL ステートメントを発行します。"

#: ../../criteria-api.md:162
msgid "NativeSql DSL"
msgstr ""

#: ../../criteria-api.md:164
msgid ""
"The NativeSql DSL can issue more complex SQL statements rather than the "
"Entityql DSL. But note that the NativeSql DSL doesn't support to "
"associate entities."
msgstr ""
"NativeSql DSL は、Entityql DSL よりも複雑な SQL ステートメントを発行できます。ただし、NativeSql DSL "
"はエンティティの関連付けをサポートしていないことに注意してください。"

#: ../../criteria-api.md:167
#, fuzzy
msgid ""
"The entry point is the `org.seasar.doma.jdbc.criteria.NativeSql` class. "
"This class has the following methods:"
msgstr ""
"エントリポイントは ``org.seasar.doma.jdbc.criteria.NativeSql`` "
"クラスです。このクラスには次のメソッドがあります。"

#: ../../criteria-api.md:175
#, fuzzy
msgid "You can instantiate the `NativeSql` class as follows:"
msgstr "次のように ``NativeSql`` クラスをインスタンス化できます。"

#: ../../criteria-api.md:181
msgid ""
"For example, to query two columns with GROUP BY and HAVING clauses, write"
" as follows:"
msgstr "たとえば、GROUP BY 句と HAVING 句を使用して 2 つの列をクエリするには、次のように記述します。"

#: ../../criteria-api.md:208
msgid "The difference between two DSLs"
msgstr "2 つの DSL の違い"

#: ../../criteria-api.md:210
msgid ""
"The biggest difference between two DSLs is that the Entityql DSL removes "
"duplicated data from the fetched results, but the NativeSQL DSL doesn't."
msgstr ""
"2 つの DSL の最大の違いは、Entityql DSL はフェッチされた結果から重複データを削除しますが、NativeSQL DSL "
"は削除しないことです。"

#: ../../criteria-api.md:213
msgid "See the following example:"
msgstr "次の例を参照してください。"

#: ../../criteria-api.md:231
msgid "Both (1) and (2) issue the same SQL statement as follows:"
msgstr "(1) と (2) の両方とも、以下のように同じ SQL ステートメントを発行します。"

#: ../../criteria-api.md:239
msgid ""
"The ResultSet contains 14 rows, but the Entityql DSL returns only 3 rows "
"because it removes duplicate Department entities. The Entityql DSL uses "
"the id properties to know the uniqueness of the entities."
msgstr ""
"ResultSet には 14 行が含まれていますが、Entityql DSL は重複するDepartment エンティティを削除するため、3 "
"行のみを返します。 Entityql DSL は、id プロパティを使用してエンティティの一意性を認識します。"

#: ../../criteria-api.md:243
msgid ""
"On the other hand, the NativeSql DSL returns the data as it retrieves "
"from the database. It puts results into entity objects, but it handles "
"them as the plain DTOs."
msgstr ""
"一方、NativeSql DSL は、データベースから取得したデータを返します。結果はエンティティオブジェクトに格納されますが、それらはプレーンな"
" DTO として処理されます。"

#: ../../criteria-api.md:246
msgid "Select statement"
msgstr "Select ステートメント"

#: ../../criteria-api.md:248
msgid "Select settings (Entityql, NativeSql)"
msgstr "Select 設定 (Entityql, NativeSql)"

#: ../../criteria-api.md:250 ../../criteria-api.md:1165
#: ../../criteria-api.md:1247 ../../criteria-api.md:1476
msgid "We support the following settings:"
msgstr "次の設定をサポートしています。"

#: ../../criteria-api.md:252 ../../criteria-api.md:1167
#: ../../criteria-api.md:1478
msgid "allowEmptyWhere"
msgstr ""

#: ../../criteria-api.md:253 ../../criteria-api.md:1169
#: ../../criteria-api.md:1249 ../../criteria-api.md:1480
msgid "comment"
msgstr ""

#: ../../criteria-api.md:254
msgid "fetchSize"
msgstr ""

#: ../../criteria-api.md:255
msgid "maxRows"
msgstr ""

#: ../../criteria-api.md:256 ../../criteria-api.md:1171
#: ../../criteria-api.md:1250 ../../criteria-api.md:1482
msgid "queryTimeout"
msgstr ""

#: ../../criteria-api.md:257 ../../criteria-api.md:1172
#: ../../criteria-api.md:1251 ../../criteria-api.md:1483
msgid "sqlLogType"
msgstr ""

#: ../../criteria-api.md:259
msgid "They are all optional. You can apply them as follows:"
msgstr "これらはすべてオプションです。それらは次のように適用できます。"

#: ../../criteria-api.md:275
msgid "Fetching (Entityql, NativeSql)"
msgstr "フェッチ (Entityql、NativeSql)"

#: ../../criteria-api.md:277
msgid ""
"Both Entityql DSL and NativeSql DSL support the following methods to "
"fetch data from a database:"
msgstr "Entityql DSL と NativeSql DSL はどちらも、データベースからデータをフェッチする次のメソッドをサポートしています。"

#: ../../criteria-api.md:279
msgid "fetch"
msgstr ""

#: ../../criteria-api.md:280
msgid "fetchOne"
msgstr ""

#: ../../criteria-api.md:281
msgid "fetchOptional"
msgstr ""

#: ../../criteria-api.md:282
msgid "stream"
msgstr ""

#: ../../criteria-api.md:305
msgid "Streaming (NativeSql)"
msgstr "ストリーミング (NativeSql)"

#: ../../criteria-api.md:307
msgid "The NativeSql DSL supports the following methods:"
msgstr "NativeSql DSL は次のメソッドをサポートしています。"

#: ../../criteria-api.md:309
msgid "mapStream"
msgstr ""

#: ../../criteria-api.md:310
msgid "collect"
msgstr ""

#: ../../criteria-api.md:311
msgid "openStream"
msgstr ""

#: ../../criteria-api.md:336
msgid ""
"These methods handle the stream that wraps a JDBC ResultSet. So they are "
"useful to process a large ResultSet effectively."
msgstr ""
"これらのメソッドは、JDBC ResultSet をラップするストリームを処理します。したがって、これらは大規模な ResultSet "
"を効率的に処理するのに役立ちます。"

#: ../../criteria-api.md:339
msgid "Select expression"
msgstr "Select 式"

#: ../../criteria-api.md:341
msgid "Entity selection (Entityql, NativeSql)"
msgstr "エンティティの検索 (Entityql、NativeSql)"

#: ../../criteria-api.md:343
#, fuzzy
msgid ""
"By default, the result entity type is the same as the one specified at "
"the `from` method. See the following code:"
msgstr "デフォルトでは、結果のエンティティタイプは ``from`` メソッドで指定されたものと同じです。次のコードを参照してください。"

#: ../../criteria-api.md:366
#, fuzzy
msgid ""
"To choose a joined entity type as the result entity type, call the "
"`select` method as follows:"
msgstr "結合されたエンティティの型を結果のエンティティの型として選択するには、次のように ``select`` メソッドを呼び出します。"

#: ../../criteria-api.md:389
msgid "Multiple entity selection (NativeSql)"
msgstr "複数のエンティティの検索 (NativeSql)"

#: ../../criteria-api.md:391
msgid ""
"You can specify multiple entity types and fetch them as a tuple as "
"follows:"
msgstr "次のように、複数のエンティティの型を指定してタプルとしてフェッチできます。"

#: ../../criteria-api.md:416
msgid ""
"The entity included in the tuple may be null when the all properties of "
"the entity are null."
msgstr "エンティティのすべてのプロパティが null の場合、タプルに含まれるエンティティは null になる可能性があります。"

#: ../../criteria-api.md:418
msgid "Column projection (NativeSql)"
msgstr "カラムの射影 (NativeSql)"

#: ../../criteria-api.md:420
#, fuzzy
msgid "To project columns, use the `select` method:"
msgstr "カラムを射影するには、 ``select`` メソッドを使用します。"

#: ../../criteria-api.md:422
msgid "To project one column, pass one property to the select method as follows:"
msgstr "1 つのカラムを射影するには、次のように 1 つのプロパティを select メソッドに渡します。"

#: ../../criteria-api.md:436
msgid ""
"To project two or more columns, pass two or more properties to the select"
" method as follows:"
msgstr "2 つ以上のカラムを射影するには、次のように 2 つ以上のプロパティを select メソッドに渡します。"

#: ../../criteria-api.md:451
#, fuzzy
msgid ""
"Up to 9 numbers, the column results are held by `Tuple2` to `Tuple9`. For"
" more than 9 numbers, the results are held by `Row`."
msgstr ""
"9 個までのカラムの結果は ``Tuple2`` から ``Tuple9`` に保持されます。 9 個を超える数値の場合、結果は ``Row`` "
"によって保持されます。"

#: ../../criteria-api.md:454
#, fuzzy
msgid "You can get a `Row` list explicitly by using `selectAsRow` as follows:"
msgstr "次のように ``selectAsRow`` を使用すると、 ``Row`` リストを明示的に取得できます。"

#: ../../criteria-api.md:463
msgid "Column projection and mapping (Entityql, NativeSql)"
msgstr "カラムの射影とマッピング (Entityql、NativeSql)"

#: ../../criteria-api.md:465
#, fuzzy
msgid ""
"To project columns and map them to an entity, use the `selectTo` method "
"as follows:"
msgstr "カラムを射影してエンティティにマップするには、次のように ``selectTo`` メソッドを使用します。"

#: ../../criteria-api.md:479
#, fuzzy
msgid ""
"Note that the select clause of the above SQL statement contains the "
"primary key \"EMPLOYEE_ID\". The `selectTo` method always includes the id"
" properties of the entity, even if you don't."
msgstr ""
"上記の SQL ステートメントの SELECT 句には主キー ``EMPLOYEE_ID`` が含まれていることに注意してください。 "
"``selectTo`` メソッドにエンティティの id プロパティが含まれていない場合でも、SELECT 句には常に主キーが含まれます。"

#: ../../criteria-api.md:484
msgid "Where expression (Entityql, NativeSql)"
msgstr "Where 式 (Entityql、NativeSql)"

#: ../../criteria-api.md:486
msgid "We support the following operators and predicates:"
msgstr "次の演算子と述語がサポートされています。"

#: ../../criteria-api.md:488 ../../criteria-api.md:874
msgid "eq - (=)"
msgstr ""

#: ../../criteria-api.md:489 ../../criteria-api.md:875
msgid "ne - (\\<>)"
msgstr ""

#: ../../criteria-api.md:490 ../../criteria-api.md:876
msgid "ge - (>=)"
msgstr ""

#: ../../criteria-api.md:491 ../../criteria-api.md:877
msgid "gt - (>)"
msgstr ""

#: ../../criteria-api.md:492 ../../criteria-api.md:878
msgid "le - (\\<=)"
msgstr ""

#: ../../criteria-api.md:493 ../../criteria-api.md:879
msgid "lt - (\\<)"
msgstr ""

#: ../../criteria-api.md:494
msgid "isNull - (is null)"
msgstr ""

#: ../../criteria-api.md:495
msgid "isNotNull - (is not null)"
msgstr ""

#: ../../criteria-api.md:496
msgid "like"
msgstr ""

#: ../../criteria-api.md:497
msgid "notLike - (not like)"
msgstr ""

#: ../../criteria-api.md:498
msgid "between"
msgstr ""

#: ../../criteria-api.md:499
msgid "in"
msgstr ""

#: ../../criteria-api.md:500
msgid "notIn - (not in)"
msgstr ""

#: ../../criteria-api.md:501
msgid "exists"
msgstr ""

#: ../../criteria-api.md:502
msgid "notExists - (not exists)"
msgstr ""

#: ../../criteria-api.md:505
#, fuzzy
msgid ""
"If the right hand operand is `null`, the WHERE or the HAVING clause "
"doesn't include the operator. See [WhereDeclaration] and "
"[HavingDeclaration] javadoc for more details."
msgstr ""
"右側のオペランドが ``null`` の場合、WHERE 句または HAVING 句には演算子が含まれません。詳細については、 "
"WhereDeclaration_ および HavingDeclaration_ の javadoc を参照してください。"

#: ../../criteria-api.md:509
msgid "We also support the following utility operators:"
msgstr "次のユーティリティ演算子もサポートしています。"

#: ../../criteria-api.md:511
msgid "eqOrIsNull - (\"=\" or \"is null\")"
msgstr ""

#: ../../criteria-api.md:512
msgid "neOrIsNotNull - (\"\\<>\" or \"is not null\")"
msgstr ""

#: ../../criteria-api.md:514 ../../criteria-api.md:881
msgid "We also support the following logical operators:"
msgstr "次の論理演算子もサポートしています。"

#: ../../criteria-api.md:516 ../../criteria-api.md:883
msgid "and"
msgstr ""

#: ../../criteria-api.md:517 ../../criteria-api.md:884
msgid "or"
msgstr ""

#: ../../criteria-api.md:518 ../../criteria-api.md:885
msgid "not"
msgstr ""

#: ../../criteria-api.md:548
msgid "You can write a subquery as follows:"
msgstr "サブクエリは次のように記述できます。"

#: ../../criteria-api.md:572
msgid "Dynamic where expression (Entityql, NativeSql)"
msgstr "動的 where 式 (Entityql、NativeSql)"

#: ../../criteria-api.md:574
msgid "A where expression uses only evaluated operators to build a WHERE clause."
msgstr "where 式は、評価された演算子のみを使用して WHERE 句を構築します。"

#: ../../criteria-api.md:576
msgid ""
"When every operators are not evaluated in a where expression, the built "
"statement doesn't have any WHERE clause."
msgstr "where 式ですべての演算子が評価されない場合、構築されたステートメントには WHERE 句が含まれません。"

#: ../../criteria-api.md:579 ../../criteria-api.md:918
msgid ""
"As well as, when every operators are not evaluated in a logical operator "
"expression, the built statement doesn't have the logical operator "
"expression."
msgstr "また、すべての演算子が論理演算子の式で評価されない場合、構築されたステートメントには論理演算子の式が含まれません。"

#: ../../criteria-api.md:582
msgid ""
"For example, suppose that a where expression contains a conditional "
"expression as follows:"
msgstr "たとえば、where 式に次のような条件式が含まれているとします。"

#: ../../criteria-api.md:600
#, fuzzy
msgid ""
"In the case that the `enableNameCondition` variable is `false`, the "
"`like` expression is ignored. The above query issues the following SQL "
"statement:"
msgstr ""
"``enableNameCondition`` 変数が ``false`` の場合、``like`` 式は無視されます。上記のクエリは次の SQL"
" ステートメントを発行します。"

#: ../../criteria-api.md:609
msgid "Join expression"
msgstr "Join 式"

#: ../../criteria-api.md:611 ../../criteria-api.md:1025
msgid "We support the following expressions:"
msgstr "次の式がサポートされています。"

#: ../../criteria-api.md:613
msgid "innerJoin - (inner join)"
msgstr "innerJoin - (内部結合)"

#: ../../criteria-api.md:614
msgid "leftJoin - (left outer join)"
msgstr "leftJoin - (左外部結合)"

#: ../../criteria-api.md:616
msgid "innerJoin (Entityql, NativeSql)"
msgstr "innerJoin (Entityql、NativeSql)"

#: ../../criteria-api.md:635
msgid "leftJoin (Entityql, NativeSql)"
msgstr "leftJoin (Entityql、NativeSQL)"

#: ../../criteria-api.md:656
msgid "association (Entityql)"
msgstr "関連付け (Entityql)"

#: ../../criteria-api.md:658
#, fuzzy
msgid ""
"You can associate entities with the `associate` operation in the Entityql"
" DSL. You have to use the `associate` operation with join expression."
msgstr ""
"Entityql DSL の ``associate`` メソッドを使用してエンティティを関連付けることができます。 join 式と一緒に "
"``associate`` メソッドを使用する必要があります。"

#: ../../criteria-api.md:690
msgid "You can associate many entities:"
msgstr "多くのエンティティを関連付けることができます。"

#: ../../criteria-api.md:714
msgid "association for immutable entities (Entityql)"
msgstr "不変エンティティの関連付け (Entityql)"

#: ../../criteria-api.md:716
#, fuzzy
msgid ""
"You can associate immutable entities with the `associateWith` operation "
"in the Entityql DSL. You have to use the `associateWith` operation with "
"join expression."
msgstr ""
"不変エンティティを Entityql DSL の ``associateWith`` メソッドに関連付けることができます。 join 式と一緒に "
"``associateWith`` メソッドを使用する必要があります。"

#: ../../criteria-api.md:749
msgid "Dynamic join expression (Entityql, NativeSql)"
msgstr "動的 join 式 (Entityql、NativeSql)"

#: ../../criteria-api.md:751
msgid "A join expression uses only evaluated operators to build a JOIN clause."
msgstr "join 式は、評価された演算子のみを使用して JOIN 句を構築します。"

#: ../../criteria-api.md:753
msgid ""
"When every operators are not evaluated in a join expression, the built "
"statement doesn't have any JOIN clause."
msgstr "すべての演算子が join 式で評価されない場合、構築されたステートメントには JOIN 句は含まれません。"

#: ../../criteria-api.md:756
msgid ""
"For example, suppose that a join expression contains a conditional "
"expression as follows:"
msgstr "たとえば、 join 式に条件分岐が含まれているとします。"

#: ../../criteria-api.md:775
#, fuzzy
msgid ""
"In the case that the `join` variable is `false`, the `on` expression is "
"ignored. The above query issues the following SQL statement:"
msgstr "``join`` 変数が ``false`` の場合、``on`` 式は無視されます。上記のクエリは次の SQL ステートメントを発行します。"

#: ../../criteria-api.md:784
msgid "Dynamic association (Entityql)"
msgstr "動的関連付け (Entityql)"

#: ../../criteria-api.md:786
#, fuzzy
msgid ""
"When you use the above dynamic join expression, the association must be "
"optional. To do it, pass the result of `AssociationOption.optional()` to "
"the associate method:"
msgstr ""
"上記の動的 join 式を使用する場合、関連付けはオプションである必要があります。これを行うには、 "
"``AssociationOption.optional()`` の結果を関連付けメソッドに渡します。"

#: ../../criteria-api.md:814
msgid "Aggregate Functions (NativeSql)"
msgstr "集約関数 (NativeSql)"

#: ../../criteria-api.md:816
msgid "We support the following aggregate functions:"
msgstr "次の集約関数をサポートしています。"

#: ../../criteria-api.md:818
msgid "avg(property)"
msgstr ""

#: ../../criteria-api.md:819
msgid "avgAsDouble(property)"
msgstr ""

#: ../../criteria-api.md:820
msgid "count()"
msgstr ""

#: ../../criteria-api.md:821
msgid "count(property)"
msgstr ""

#: ../../criteria-api.md:822
msgid "countDistinct(property)"
msgstr ""

#: ../../criteria-api.md:823
msgid "max(property)"
msgstr ""

#: ../../criteria-api.md:824
msgid "min(property)"
msgstr ""

#: ../../criteria-api.md:825
msgid "sum(property)"
msgstr ""

#: ../../criteria-api.md:827
#, fuzzy
msgid ""
"These are defined in the "
"`org.seasar.doma.jdbc.criteria.expression.Expressions` class. Use them "
"with static import."
msgstr ""
"これらは ``org.seasar.doma.jdbc.criteria.expression.Expressions`` "
"クラスで定義されています。静的インポートで使用します。"

#: ../../criteria-api.md:830
#, fuzzy
msgid "For example, you can pass the `sum` function to the select method:"
msgstr "たとえば、 ``sum`` 関数を select メソッドに渡すことができます。"

#: ../../criteria-api.md:844
msgid "Group by expression (NativeSql)"
msgstr "Group by 式 (NativeSql)"

#: ../../criteria-api.md:859
msgid ""
"When you don't specify a group by expression, the expression is inferred "
"from the select expression automatically. So the following code issue the"
" same SQL statement above:"
msgstr ""
"group by 式を指定しない場合、group by 式は select 式から自動的に推測されます。したがって、次のコードは上記と同じ SQL"
" ステートメントを発行します。"

#: ../../criteria-api.md:870
msgid "Having expression (NativeSql)"
msgstr "Having 式(NativeSql)"

#: ../../criteria-api.md:872
msgid "We support the following operators:"
msgstr "次の演算子をサポートしています。"

#: ../../criteria-api.md:911
msgid "Dynamic having expression (NativeSql)"
msgstr "動的 Having 式 (NativeSql)"

#: ../../criteria-api.md:913
msgid ""
"A having expression uses only evaluated operators to build a HAVING "
"clause."
msgstr "having 式では、評価された演算子のみを使用して HAVING 句を構築します。"

#: ../../criteria-api.md:915
msgid ""
"When every operators are not evaluated in a having expression, the built "
"statement doesn't have any HAVING clause."
msgstr "having 式ですべての演算子が評価されない場合、構築されたステートメントには HAVING 句は含まれません。"

#: ../../criteria-api.md:921
msgid "Order by expression (Entityql, NativeSql)"
msgstr "Order by 式 (Entityql、NativeSql)"

#: ../../criteria-api.md:923
msgid "We support the following order operations:"
msgstr "次のソート操作をサポートしています。"

#: ../../criteria-api.md:925
msgid "asc"
msgstr ""

#: ../../criteria-api.md:926
msgid "desc"
msgstr "\n"

#: ../../criteria-api.md:951
msgid "Dynamic order by expression (NativeSql)"
msgstr "動的 Order by 式 (NativeSql)"

#: ../../criteria-api.md:953
msgid ""
"An order by expression uses only evaluated operators to build an ORDER BY"
" clause."
msgstr "order by 式では、評価された演算子のみを使用して ORDER BY 句を作成します。"

#: ../../criteria-api.md:955
msgid ""
"When every operators are not evaluated in a order by expression, the "
"built statement doesn't have any ORDER BY clause."
msgstr "すべての演算子が order by 式で評価されない場合、構築されたステートメントには ORDER BY 句は含まれません。"

#: ../../criteria-api.md:958
msgid "Distinct expression (Entityql, NativeSql)"
msgstr "Distinct 式 (Entityql、NativeSql)"

#: ../../criteria-api.md:978
msgid "Limit and Offset expression (Entityql, NativeSql)"
msgstr "Limit および offset 式 (Entityql、NativeSql)"

#: ../../criteria-api.md:997
msgid "Dynamic Limit and Offset expression (Entityql, NativeSql)"
msgstr "動的な limit および offset 式 (Entityql、NativeSql)"

#: ../../criteria-api.md:999
msgid ""
"A limit expressions uses only non-null value to build a FETCH FIRST "
"clause. When the value is null ,the built statement doesn't have any "
"FETCH FIRST clause."
msgstr ""
"limit 式では、null 以外の値のみを使用して FETCH FIRST 句を構築します。値が null の場合、構築されたステートメントには"
" FETCH FIRST 句がありません。"

#: ../../criteria-api.md:1002
msgid ""
"As well as, an offset expressions uses only non-null value to build a "
"OFFSET clause. When the value is null ,the built statement doesn't have "
"any OFFSET clause."
msgstr ""
"また、offset 式では、OFFSET 句を構築するために null 以外の値のみが使用されます。値が null "
"の場合、構築されたステートメントには OFFSET 句がありません。"

#: ../../criteria-api.md:1005
msgid "For Update expression (Entityql, NativeSql)"
msgstr "For update 式 (Entityql、NativeSql)"

#: ../../criteria-api.md:1023
msgid "Union expression (NativeSql)"
msgstr "Union 式（NativeSql）"

#: ../../criteria-api.md:1027
msgid "union"
msgstr ""

#: ../../criteria-api.md:1028
msgid "unionAll - (union all)"
msgstr ""

#: ../../criteria-api.md:1051
msgid "The order by expression with index is supported:"
msgstr "インデックスを使用した式による順序付けがサポートされています。"

#: ../../criteria-api.md:1067
msgid "Derived Table expression (Entityql, NativeSql)"
msgstr "派生テーブル式 (Entityql、NativeSql)"

#: ../../criteria-api.md:1069
msgid ""
"We support subqueries using derived tables. However, an entity class "
"corresponding to the derived table is required."
msgstr "派生テーブルを使用したサブクエリをサポートします。ただし、派生テーブルに対応するエンティティクラスが必要です。"

#: ../../criteria-api.md:1072
msgid "Define the entity class corresponding to the derived table as follows:"
msgstr "派生テーブルに対応するエンティティ クラスを次のように定義します。"

#: ../../criteria-api.md:1118
msgid "A subquery using a derived table can be written as follows."
msgstr "派生テーブルを使用したサブクエリは次のように記述できます。"

#: ../../criteria-api.md:1158
msgid "Delete statement"
msgstr "Delete ステートメント"

#: ../../criteria-api.md:1160
#, fuzzy, python-brace-format
msgid ""
"For the specification of the where expression, see {ref}`criteria-where`."
" The same rule is applied to delete statements."
msgstr "where 式の仕様については、:ref:`criteria_where` を参照してください。同じルールがステートメントの削除にも適用されます。"

#: ../../criteria-api.md:1163
msgid "Delete settings (Entityql, NativeSql)"
msgstr "Delete 設定（Entityql、NativeSql）"

#: ../../criteria-api.md:1168 ../../criteria-api.md:1252
#: ../../criteria-api.md:1479
msgid "batchSize"
msgstr ""

#: ../../criteria-api.md:1170 ../../criteria-api.md:1481
msgid "ignoreVersion"
msgstr "ignoreVersion"

#: ../../criteria-api.md:1173 ../../criteria-api.md:1484
msgid "suppressOptimisticLockException"
msgstr "suppressOptimisticLockException"

#: ../../criteria-api.md:1175 ../../criteria-api.md:1258
#: ../../criteria-api.md:1489
msgid "They are all optional."
msgstr "これらはすべてオプションです。"

#: ../../criteria-api.md:1177 ../../criteria-api.md:1260
#: ../../criteria-api.md:1491
msgid "You can apply them as follows:"
msgstr "それらは次のように適用できます。"

#: ../../criteria-api.md:1194
msgid ""
"If you want to build a delete statement without a WHERE clause, you have "
"to enable the `allowEmptyWhere` setting."
msgstr "WHERE 句のない削除ステートメントを構築したい場合は、`allowEmptyWhere` 設定を有効にする必要があります。"

#: ../../criteria-api.md:1198
msgid "Delete statement (Entityql)"
msgstr "Delete ステートメント (Entityql)"

#: ../../criteria-api.md:1214
msgid "Batch Delete is also supported:"
msgstr "バッチ削除もサポートされています。"

#: ../../criteria-api.md:1225 ../../criteria-api.md:1367
#: ../../criteria-api.md:1397 ../../criteria-api.md:1556
#: ../../criteria-api.md:1585
msgid "The execute method may throw following exceptions:"
msgstr "実行メソッドは次の例外をスローする場合があります。"

#: ../../criteria-api.md:1227 ../../criteria-api.md:1558
msgid ""
"OptimisticLockException: if the entity has a version property and an "
"update count is 0"
msgstr "OptimisticLockException: エンティティにバージョン プロパティがあり、更新件数が 0 の場合"

#: ../../criteria-api.md:1229
msgid "Delete statement (NativeSql)"
msgstr "Delete ステートメント (NativeSql)"

#: ../../criteria-api.md:1243
msgid "Insert statement"
msgstr "Insert ステートメント"

#: ../../criteria-api.md:1245
msgid "Insert settings (Entityql, NativeSql)"
msgstr "Insert 設定 (Entityql、NativeSql)"

#: ../../criteria-api.md:1253 ../../criteria-api.md:1485
msgid "excludeNull"
msgstr ""

#: ../../criteria-api.md:1254 ../../criteria-api.md:1486
msgid "include"
msgstr ""

#: ../../criteria-api.md:1255 ../../criteria-api.md:1487
msgid "exclude"
msgstr ""

#: ../../criteria-api.md:1256
msgid "ignoreGeneratedKeys"
msgstr ""

#: ../../criteria-api.md:1295
msgid "Insert statement (Entityql)"
msgstr "Insert ステートメント (Entityql)"

#: ../../criteria-api.md:1316
msgid "Batch Insert is also supported:"
msgstr "バッチ追加もサポートされています。"

#: ../../criteria-api.md:1328
msgid "Multi-row Insert is also supported:"
msgstr "複数行追加もサポートされています。"

#: ../../criteria-api.md:1347 ../../criteria-api.md:1422
msgid "Upsert is also supported:"
msgstr "Upsertもサポートされています"

#: ../../criteria-api.md:1349
msgid ""
"By calling on `onDuplicateKeyUpdate`, you can update when a key is "
"duplicated."
msgstr "`onDuplicateKeyUpdate` を呼び出すことで、キーが重複した場合に更新することができます。"

#: ../../criteria-api.md:1358
msgid ""
"By calling on `onDuplicateKeyIgnore`, you can ignore errors when a key is"
" duplicated."
msgstr "`onDuplicateKeyIgnore` を呼び出すことで、キーが重複した場合のエラーを無視することができます。"

#: ../../criteria-api.md:1369 ../../criteria-api.md:1399
#: ../../criteria-api.md:1559 ../../criteria-api.md:1587
msgid "UniqueConstraintException: if an unique constraint is violated"
msgstr "UniqueConstraintException: 一意制約に違反した場合"

#: ../../criteria-api.md:1371
msgid "Insert statement (NativeSql)"
msgstr "Insert ステートメント (NativeSql)"

#: ../../criteria-api.md:1401
msgid "We also support the INSERT SELECT syntax as follows:"
msgstr "次のような INSERT SELECT 構文もサポートされています。"

#: ../../criteria-api.md:1424
msgid ""
"By calling on `onDuplicateKeyUpdate`, you can update when a key is "
"duplicated. You can specify keys for duplicate check targets in `keys`. "
"You can specify the value of the update in case of duplicates in `set`."
msgstr ""
"`onDuplicateKeyUpdate` を呼び出すことで、キーが重複したときに更新することができます。 `keys` "
"で重複チェック対象のキーを指定できます。`set` で重複した場合の更新の値を指定できます。"

#: ../../criteria-api.md:1450
msgid ""
"By calling on `onDuplicateKeyIgnore`, you can ignore errors when a key is"
" duplicated. You can specify keys for duplicate check targets in `keys`."
msgstr ""
"`onDuplicateKeyIgnore` を呼び出すことで、キーが重複したときのエラーを無視することができます。 `keys` "
"で重複チェック対象のキーを指定できます。"

#: ../../criteria-api.md:1469
msgid "Update statement"
msgstr "Update ステートメント"

#: ../../criteria-api.md:1471
#, fuzzy, python-brace-format
msgid ""
"For the specification of the where expression, see {ref}`criteria-where`."
" The same rule is applied to update statements."
msgstr "where 式の仕様については、:ref:`criteria_where` を参照してください。同じルールが更新ステートメントにも適用されます。"

#: ../../criteria-api.md:1474
msgid "Update settings (Entityql, NativeSql)"
msgstr "Update 設定 (Entityql、NativeSql)"

#: ../../criteria-api.md:1521
msgid ""
"If you want to build a update statement without a WHERE clause, you have "
"to enable the `allowEmptyWhere` setting."
msgstr "WHERE 句のない update ステートメントを構築したい場合は、`allowEmptyWhere` 設定を有効にする必要があります。"

#: ../../criteria-api.md:1525
msgid "Update statement (Entityql)"
msgstr "Update ステートメント (Entityql)"

#: ../../criteria-api.md:1544
msgid "Batch Update is also supported:"
msgstr "バッチ更新もサポートされています。"

#: ../../criteria-api.md:1561
msgid "Update statement (NativeSql)"
msgstr "Update ステートメント (NativeSql)"

#: ../../criteria-api.md:1589
msgid "Property expressions (Entityql, NativeSql)"
msgstr "プロパティ式 (Entityql、NativeSql)"

#: ../../criteria-api.md:1591
#, fuzzy
msgid ""
"All expression methods are defined in the "
"`org.seasar.doma.jdbc.criteria.expression.Expressions` class."
msgstr ""
"すべての式メソッドは ``org.seasar.doma.jdbc.criteria.expression.Expressions`` "
"クラスで定義されています。"

#: ../../criteria-api.md:1594
msgid "Use them with static import."
msgstr "静的インポートで使用します。"

#: ../../criteria-api.md:1596
msgid "Arithmetic expressions"
msgstr "算術式"

#: ../../criteria-api.md:1598
msgid "We provide the following methods:"
msgstr "次の方法を提供します。"

#: ../../criteria-api.md:1600
msgid "add - (+)"
msgstr ""

#: ../../criteria-api.md:1601
msgid "sub - (-)"
msgstr ""

#: ../../criteria-api.md:1602
msgid "mul - (\\*)"
msgstr ""

#: ../../criteria-api.md:1603
msgid "div - (/)"
msgstr ""

#: ../../criteria-api.md:1604
msgid "mod - (%)"
msgstr ""

#: ../../criteria-api.md:1606
#, fuzzy
msgid "You can use the `add` method as follows:"
msgstr "次のように ``add`` メソッドを使用できます。"

#: ../../criteria-api.md:1627
msgid "String functions"
msgstr "文字列関数"

#: ../../criteria-api.md:1629 ../../criteria-api.md:1661
msgid "We provide the following method:"
msgstr "以下の方法を提供します。"

#: ../../criteria-api.md:1631
msgid "concat"
msgstr ""

#: ../../criteria-api.md:1632
msgid "lower"
msgstr ""

#: ../../criteria-api.md:1633
msgid "upper"
msgstr ""

#: ../../criteria-api.md:1634
msgid "trim"
msgstr ""

#: ../../criteria-api.md:1635
msgid "ltrim"
msgstr ""

#: ../../criteria-api.md:1636
msgid "rtrim"
msgstr ""

#: ../../criteria-api.md:1638
#, fuzzy
msgid "You can use the `concat` method as follows:"
msgstr "次のように ``concat`` メソッドを使用できます。"

#: ../../criteria-api.md:1659
msgid "Literal expression"
msgstr "リテラル表現"

#: ../../criteria-api.md:1663
msgid "literal (for all basic data types)"
msgstr ""

#: ../../criteria-api.md:1665
#, fuzzy
msgid "You can use the `literal` method as follows:"
msgstr "次のように ``literal`` メソッドを使用できます。"

#: ../../criteria-api.md:1681
msgid "Note that the literal expressions are not recognized as bind variables."
msgstr "リテラル式はバインド変数として認識されないことに注意してください。"

#: ../../criteria-api.md:1684
msgid "Case expression"
msgstr "Case 式"

#: ../../criteria-api.md:1686 ../../criteria-api.md:1720
msgid "We support the following method:"
msgstr "次の方法をサポートしています。"

#: ../../criteria-api.md:1688
msgid "when"
msgstr ""

#: ../../criteria-api.md:1690
#, fuzzy
msgid "You can use the `when` method as follows:"
msgstr "次のように ``when`` メソッドを使用できます。"

#: ../../criteria-api.md:1718
msgid "Subquery select expression"
msgstr "サブクエリ select 式"

#: ../../criteria-api.md:1722
msgid "select"
msgstr ""

#: ../../criteria-api.md:1724
#, fuzzy
msgid "You can use the `select` method as follows:"
msgstr "次のように ``select`` メソッドを使用できます。"

#: ../../criteria-api.md:1763
msgid "User-defined expressions"
msgstr "ユーザー定義式"

#: ../../criteria-api.md:1765
#, fuzzy
msgid ""
"You can define user-defined expressions by calling "
"`Expressions.userDefined`."
msgstr "``Expressions.userDefined`` を呼び出すことで、ユーザー定義の式を定義できます。"

#: ../../criteria-api.md:1767
msgid "In the example below, the replace function is defined:"
msgstr "以下の例では、replace 関数が定義されています。"

#: ../../criteria-api.md:1783
msgid "You can use the replace function in your query as follows:"
msgstr "クエリで replace 関数を使用するには、次のようにします。"

#: ../../criteria-api.md:1799
msgid "Scopes (Entityql, NativeSql)"
msgstr "スコープ (Entityql、NativeSQL)"

#: ../../criteria-api.md:1801
msgid "Scoping allow you to specify commonly-used query conditions."
msgstr "スコープを使用すると、一般的に使用されるクエリ条件を指定できます。"

#: ../../criteria-api.md:1803
#, fuzzy
msgid ""
"To define a simple scope, create the class which has a method annotated "
"with `@Scope`:"
msgstr "単純なスコープを定義するには、 ``@Scope`` アノテーションが付けられたメソッドを持つクラスを作成します。"

#: ../../criteria-api.md:1815
#, fuzzy
msgid ""
"To enable the scope, specify the above class in the scopes element of "
"`@Metamodel`:"
msgstr "スコープを有効にするには、 ``@Metamodel`` のscopes 要素に上記のクラスを指定します。"

#: ../../criteria-api.md:1823
#, fuzzy
msgid ""
"Now the metamodel `Department_` has a `onlyTokyo` method. You can use it "
"as follows:"
msgstr "上述の設定によりメタモデル ``Department_`` には ``onlyTokyo`` メソッドが生成されます。次のように使用できます。"

#: ../../criteria-api.md:1839
msgid ""
"When you want to combine other query conditions with scopes, compose them"
" using the `andThen` method:"
msgstr "他のクエリ条件をスコープと組み合わせたい場合は、 `andThen` メソッドを使用して条件を作成します。"

#: ../../criteria-api.md:1848
msgid "You can define several scopes in a class as follows:"
msgstr "次のように、クラス内に複数のスコープを定義できます。"

#: ../../criteria-api.md:1869
msgid "Tips"
msgstr "ちょっとした便利機能"

#: ../../criteria-api.md:1871
msgid "Execution in Dao (Entityql, NativeSql)"
msgstr "DAOでの実行（Entityql、NativeSql）"

#: ../../criteria-api.md:1873
#, fuzzy
msgid ""
"It is useful to execute DSLs in the default method of the Dao interface. "
"To get a `config` object, call `Config.get(this)` in the default method "
"as follows:"
msgstr ""
"DAO インターフェースのデフォルトのメソッドで DSL を実行すると便利です。 ``config`` "
"オブジェクトを取得するには、次のようにデフォルトのメソッドで ``Config.get(this)`` を呼び出します。"

#: ../../criteria-api.md:1889
msgid "Overwriting the table name (Entityql, NativeSql)"
msgstr "テーブル名の上書き（Entityql、NativeSql）"

#: ../../criteria-api.md:1891
msgid ""
"A metamodel constructor accepts the qualified table name and the "
"metamodel overwrites its table name."
msgstr "メタモデル コンストラクターは修飾されたテーブル名を受け入れ、メタモデルはそのテーブル名を上書きします。"

#: ../../criteria-api.md:1894
msgid "It is useful to handle two tables that have the same data structure:"
msgstr "同じデータ構造を持つ 2 つのテーブルを処理すると便利です。"

#: ../../criteria-api.md:1913
msgid "Debugging (Entityql, NativeSql)"
msgstr "デバッグ (Entityql、NativeSql)"

#: ../../criteria-api.md:1915
#, fuzzy
msgid "To know the SQL statement built by the DSLs, use the `asSql` method:"
msgstr "DSL によって構築された SQL ステートメントを知るには、 ``asSql`` メソッドを使用します。"

#: ../../criteria-api.md:1927 ../../criteria-api.md:1954
msgid "The above code prints as follows:"
msgstr "上記のコードは次のように出力されます。"

#: ../../criteria-api.md:1934
#, fuzzy
msgid ""
"The `asSql` method doesn't issue the SQL statement to your Database. It "
"only builds the SQL statement and return it as an `Sql` object."
msgstr ""
"``asSql`` メソッドはデータベースに SQL ステートメントを発行しません。 SQL ステートメントを構築し、それを ``Sql`` "
"オブジェクトとして返すだけです。"

#: ../../criteria-api.md:1937
#, fuzzy
msgid "You can also get the `Sql` object by calling the `peek` method."
msgstr "``peek`` メソッドを呼び出して ``Sql`` オブジェクトを取得することもできます。"

#: ../../criteria-api.md:1963
msgid "Sample projects"
msgstr "サンプルプロジェクト"

#: ../../criteria-api.md:1965
msgid "[simple-examples](https://github.com/domaframework/simple-examples)"
msgstr ""

#: ../../criteria-api.md:1966
msgid "[kotlin-sample](https://github.com/domaframework/kotlin-sample)"
msgstr ""

#~ msgid "ne - (<>)"
#~ msgstr ""

#~ msgid "le - (<=)"
#~ msgstr ""

#~ msgid "lt - (<)"
#~ msgstr ""

#~ msgid "neOrIsNotNull - (\"<>\" or \"is not null\")"
#~ msgstr ""

#~ msgid "mul - (*)"
#~ msgstr ""

#~ msgid "`simple-examples <https://github.com/domaframework/simple-examples>`_"
#~ msgstr ""

#~ msgid "`kotlin-sample <https://github.com/domaframework/kotlin-sample>`_"
#~ msgstr ""

