
msgid ""
msgstr ""
"Project-Id-Version:  doma-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-12 10:26+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language: ja_JP\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../kotlin-support.md:1
msgid "Kotlin support"
msgstr "Kotlin サポート"

#: ../../kotlin-support.md:2
msgid "Contents"
msgstr "コンテンツ"

#: ../../kotlin-support.md:7

msgid "Doma supports [Kotlin](https://kotlinlang.org/) 1.4.0 or later."
msgstr "Doma は、 `Kotlin <https://kotlinlang.org/>`_ 1.4.0 以降をサポートしています。"

#: ../../kotlin-support.md:9
msgid "Best practices"
msgstr "ベストプラクティス"

#: ../../kotlin-support.md:11
msgid ""
"Here are some recommended approaches for defining classes and working "
"with Kotlin in Doma."
msgstr "Kotlinでクラスを定義し、Domaで使用するためのおすすめのアプローチをいくつか紹介します。"

#: ../../kotlin-support.md:13
msgid "Entity classes"
msgstr "エンティティクラス"

#: ../../kotlin-support.md:15
msgid "Define as a plain class"
msgstr "プレーンクラスとして定義する"

#: ../../kotlin-support.md:16

msgid "Specify a `Metamodel` annotation in the `metamodel` element of `@Entity`"
msgstr "`@Entity` の `metamodel` 要素に `Metamodel` annotation を指定する"

#: ../../kotlin-support.md:40
msgid "Domain classes"
msgstr "ドメインクラス"

#: ../../kotlin-support.md:42 ../../kotlin-support.md:54
msgid "Define as a data class"
msgstr "データクラスとして定義する"

#: ../../kotlin-support.md:43 ../../kotlin-support.md:55
msgid "Define only one constructor"
msgstr "コンストラクターを 1 つだけ定義する"

#: ../../kotlin-support.md:44

msgid "Define only one property named `value` in the constructor"
msgstr "コンストラクターでは、名前が `value` であるプロパティを 1 つだけ定義する"

#: ../../kotlin-support.md:45
msgid "Use `val` for the property definition"
msgstr "プロパティ定義には `val` を使用する"

#: ../../kotlin-support.md:52
msgid "Embeddable classes"
msgstr "埋め込み可能クラス"

#: ../../kotlin-support.md:56
msgid "Define properties only in the constructor"
msgstr "コンストラクター内でのみプロパティを定義する"

#: ../../kotlin-support.md:57
msgid "Use `val` for the property definitions"
msgstr "プロパティ定義には `val` を使用する"

#: ../../kotlin-support.md:64
msgid "Dao interfaces"
msgstr "Dao インターフェース"

#: ../../kotlin-support.md:66

msgid "Specify a SQL template with `@org.seasar.doma.Sql`"
msgstr "SQLテンプレートを `@org.seasar.doma.Sql` で指定する"

#: ../../kotlin-support.md:90
msgid "Kotlin-specific Criteria API"
msgstr "Kotlin 固有の Criteria API"

#: ../../kotlin-support.md:93
msgid ""
"It is recommended to use the Kotlin-specific Criteria API rather than DAO"
" interfaces."
msgstr "DAO インターフェイスよりも Kotlin 固有の Criteria API を使ってください"

#: ../../kotlin-support.md:96

msgid ""
"Doma provides `KQueryDsl`, a Criteria API specifically designed for "
"Kotlin. It is very similar to the `QueryDsl`, which is described in "
"[](query-dsl.md). The main advantage of `KQueryDsl` is its simplicity."
msgstr ""
"Doma はKotlin 専用の Criteria APIである `KQueryDsl` を提供します。これは [クエリDSL](query-"
"dsl.md) で説明されている `QueryDsl` にとても似ています。`KQueryDsl` の最大の特徴はシンプルさです。"

#: ../../kotlin-support.md:117

msgid ""
"You can find more sample code [here](https://github.com/domaframework"
"/kotlin-sample)."
msgstr ""
"`ここ <https://github.com/domaframework/kotlin-sample>`_ で多くのサンプル "
"コードを参照できます。"

#: ../../kotlin-support.md:119

msgid ""
"The `KQueryDsl` is included in the doma-kotlin module. Note that you "
"should use doma-kotlin instead of doma-core in your build script. You can"
" configure your build.gradle.kts as follows:"
msgstr ""
"`KQueryDsl` はdoma-kotlinモジュールに含まれています。ビルドスクリプトでは doma-core の代わりに doma-"
"kotlin を使用してください。build.gradle.kts は次のように構成できます:"

#: ../../kotlin-support.md:129
msgid "Code Generation"
msgstr "コード生成"

#: ../../kotlin-support.md:131

msgid "Use [](codegen.md). This plugin supports Kotlin code generation."
msgstr "[Doma CodeGen プラグイン](codegen.md) を使用してください。このプラグインはKotlinのコード生成をサポートしています。"

#: ../../kotlin-support.md:134
msgid "Using kapt in Gradle"
msgstr "Gradle での kapt の使用"

#: ../../kotlin-support.md:136

msgid ""
"Annotation processors are supported in Kotlin with the "
"[kapt](https://kotlinlang.org/docs/reference/kapt.html) compiler plugin."
msgstr ""
"アノテーション プロセッサは、Kotlin で `kapt "
"<https://kotlinlang.org/docs/reference/kapt.html>`_ コンパイラ "
"プラグインを使用してサポートされています。"

#: ../../kotlin-support.md:139
msgid ""
"Add the dependencies using the `kapt` and `implementation` configurations"
" in your dependencies block. For example, you can write build.gradle.kts "
"as follows:"
msgstr ""
"依存関係ブロックの `kapt` および `implementation` を使用して依存関係を追加します。たとえば、次のように "
"build.gradle.kts を記述できます。"

#: ../../kotlin-support.md:149

msgid ""
"To simplify your build script, we recommend using the [Doma Compile "
"Plugin](https://github.com/domaframework/doma-compile-plugin)."
msgstr ""
"ビルド スクリプトを簡略化するには、`Doma コンパイル プラグイン <https://github.com/domaframework"
"/doma-compile-plugin>`_ を使用することをお勧めします。"

#: ../../kotlin-support.md:152
msgid "Sample project"
msgstr "サンプルプロジェクト"

#: ../../kotlin-support.md:154

msgid "[kotlin-sample](https://github.com/domaframework/kotlin-sample)"
msgstr ""
"`ここ <https://github.com/domaframework/kotlin-sample>`_ で多くのサンプル "
"コードを参照できます。"

#~ msgid "`kotlin-sample <https://github.com/domaframework/kotlin-sample>`_"
#~ msgstr ""

