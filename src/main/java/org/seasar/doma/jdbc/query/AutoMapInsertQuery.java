/*
 * Copyright 2004-2010 the Seasar Foundation and the Others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
package org.seasar.doma.jdbc.query;

import static org.seasar.doma.internal.util.AssertionUtil.assertNotNull;

import java.util.Map;
import java.sql.Statement;

import org.seasar.doma.internal.jdbc.sql.BasicInParameter;
import org.seasar.doma.internal.jdbc.sql.PreparedSql;
import org.seasar.doma.internal.jdbc.sql.PreparedSqlBuilder;
import org.seasar.doma.jdbc.SqlExecutionSkipCause;
import org.seasar.doma.jdbc.Naming;
import org.seasar.doma.jdbc.SqlKind;
import org.seasar.doma.jdbc.SqlLogType;
import org.seasar.doma.jdbc.dialect.Dialect;
import org.seasar.doma.wrapper.ObjectWrapper;

/**
 * @author bakenezumi
 */
public class AutoMapInsertQuery extends AbstractQuery implements
    InsertQuery {

    protected final String tableName;

    protected final Map<String, Object> parameter;

    protected PreparedSql sql;

    protected boolean executable;

    protected SqlLogType sqlLogType;

    protected boolean nullExcluded;

    public AutoMapInsertQuery(String tableName, Map<String, Object> parameter) {
        assertNotNull(tableName, parameter);
        this.tableName = tableName;
        this.parameter = parameter;
    }

    public void setSqlLogType(SqlLogType sqlLogType) {
        this.sqlLogType = sqlLogType;
    }

    public SqlLogType getSqlLogType() {
        return sqlLogType;
    }

    public boolean isExecutable() {
        return executable;
    }

    @Override
    public void prepare() {
        super.prepare();
        assertNotNull(method);
        executable = true;
        preInsert();
        prepareOptions();
        prepareSql();
        assertNotNull(sql);
    }

    protected void preInsert() {
    }

    protected void prepareOptions() {
        if (queryTimeout <= 0) {
            queryTimeout = config.getQueryTimeout();
        }
    }

    protected void prepareSql() {
        Naming naming = config.getNaming();
        Dialect dialect = config.getDialect();
        PreparedSqlBuilder builder = new PreparedSqlBuilder(config,
                SqlKind.INSERT, sqlLogType);
        builder.appendSql("insert into ");
        // TODO: DatabaseObjectUtil.getQualifiedNameの利用
        builder.appendSql(tableName);
        builder.appendSql(" (");
        for (String columName : parameter.keySet()) {
            // TODO: dialect::applyQuoteを利用すべき?
            // builder.appendSql(propertyType.getColumnName(naming::apply,
            //         dialect::applyQuote));
            builder.appendSql(columName);
            builder.appendSql(", ");
        }
        builder.cutBackSql(2);
        builder.appendSql(") values (");
        for (String columName : parameter.keySet()) {
            builder.appendParameter(new BasicInParameter(() -> new ObjectWrapper(parameter.get(columName))));
            builder.appendSql(", ");
        }
        builder.cutBackSql(2);
        builder.appendSql(")");
        sql = builder.build(this::comment);
    }

    @Override
    public SqlExecutionSkipCause getSqlExecutionSkipCause() {
        return SqlExecutionSkipCause.STATE_UNCHANGED;
    }

    @Override
    public boolean isAutoGeneratedKeysSupported() {
        return false;
    }

    @Override
    public boolean isOptimisticLockCheckRequired() {
        return false;
    }

    @Override
    public PreparedSql getSql() {
        return sql;
    }

    @Override
    public void generateId(Statement statement) {
        // Not Implementation
    }

    @Override
    public void complete() {
        postInsert();
    }

    protected void postInsert() {
    }

}
