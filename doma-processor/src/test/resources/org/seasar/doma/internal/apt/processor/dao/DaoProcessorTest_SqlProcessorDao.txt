package org.seasar.doma.internal.apt.processor.dao;

/** */
@javax.annotation.Generated(value = { "Doma", "@VERSION@" }, date = "1970-01-01T09:00:00.000+0900")
@org.seasar.doma.DaoImplementation
public class SqlProcessorDaoImpl implements org.seasar.doma.internal.apt.processor.dao.SqlProcessorDao, org.seasar.doma.jdbc.ConfigProvider {

    static {
        org.seasar.doma.internal.Artifact.validateVersion("@VERSION@");
    }

    private static final java.lang.reflect.Method __method0 = org.seasar.doma.internal.jdbc.dao.DaoImplSupport.getDeclaredMethod(org.seasar.doma.internal.apt.processor.dao.SqlProcessorDao.class, "process_typeParameter", java.lang.Integer.class, java.util.function.BiFunction.class);

    private static final java.lang.reflect.Method __method1 = org.seasar.doma.internal.jdbc.dao.DaoImplSupport.getDeclaredMethod(org.seasar.doma.internal.apt.processor.dao.SqlProcessorDao.class, "process_string", java.lang.Integer.class, java.util.function.BiFunction.class);

    private static final java.lang.reflect.Method __method2 = org.seasar.doma.internal.jdbc.dao.DaoImplSupport.getDeclaredMethod(org.seasar.doma.internal.apt.processor.dao.SqlProcessorDao.class, "process_void", java.lang.Integer.class, java.util.function.BiFunction.class);

    private final org.seasar.doma.internal.jdbc.dao.DaoImplSupport __support;

    /** */
    public SqlProcessorDaoImpl() {
        __support = new org.seasar.doma.internal.jdbc.dao.DaoImplSupport(new org.seasar.doma.internal.apt.processor.dao.MyConfig());
    }

    /**
     * @param connection the connection
     */
    public SqlProcessorDaoImpl(java.sql.Connection connection) {
        __support = new org.seasar.doma.internal.jdbc.dao.DaoImplSupport(new org.seasar.doma.internal.apt.processor.dao.MyConfig(), connection);
    }

    /**
     * @param dataSource the dataSource
     */
    public SqlProcessorDaoImpl(javax.sql.DataSource dataSource) {
        __support = new org.seasar.doma.internal.jdbc.dao.DaoImplSupport(new org.seasar.doma.internal.apt.processor.dao.MyConfig(), dataSource);
    }

    /**
     * @param config the configuration
     */
    protected SqlProcessorDaoImpl(org.seasar.doma.jdbc.Config config) {
        __support = new org.seasar.doma.internal.jdbc.dao.DaoImplSupport(config);
    }

    /**
     * @param config the configuration
     * @param connection the connection
     */
    protected SqlProcessorDaoImpl(org.seasar.doma.jdbc.Config config, java.sql.Connection connection) {
        __support = new org.seasar.doma.internal.jdbc.dao.DaoImplSupport(config, connection);
    }

    /**
     * @param config the configuration
     * @param dataSource the dataSource
     */
    protected SqlProcessorDaoImpl(org.seasar.doma.jdbc.Config config, javax.sql.DataSource dataSource) {
        __support = new org.seasar.doma.internal.jdbc.dao.DaoImplSupport(config, dataSource);
    }

    @Override
    public org.seasar.doma.jdbc.Config getConfig() {
        return __support.getConfig();
    }

    @Override
    public <R> R process_typeParameter(java.lang.Integer id, java.util.function.BiFunction<org.seasar.doma.jdbc.Config, org.seasar.doma.jdbc.PreparedSql, R> handler) {
        __support.entering("org.seasar.doma.internal.apt.processor.dao.SqlProcessorDaoImpl", "process_typeParameter", id, handler);
        try {
            if (handler == null) {
                throw new org.seasar.doma.DomaNullPointerException("handler");
            }
            org.seasar.doma.jdbc.query.SqlProcessorQuery __query = __support.getQueryImplementors().createSqlProcessorQuery(__method0);
            __query.setMethod(__method0);
            __query.setConfig(__support.getConfig());
            __query.setSqlFilePath("META-INF/org/seasar/doma/internal/apt/processor/dao/SqlProcessorDao/process_typeParameter.sql");
            __query.addParameter("id", java.lang.Integer.class, id);
            __query.setCallerClassName("org.seasar.doma.internal.apt.processor.dao.SqlProcessorDaoImpl");
            __query.setCallerMethodName("process_typeParameter");
            __query.prepare();
            org.seasar.doma.jdbc.command.SqlProcessorCommand<R> __command = __support.getCommandImplementors().createSqlProcessorCommand(__method0, __query, handler);
            R __result = __command.execute();
            __query.complete();
            __support.exiting("org.seasar.doma.internal.apt.processor.dao.SqlProcessorDaoImpl", "process_typeParameter", __result);
            return __result;
        } catch (java.lang.RuntimeException __e) {
            __support.throwing("org.seasar.doma.internal.apt.processor.dao.SqlProcessorDaoImpl", "process_typeParameter", __e);
            throw __e;
        }
    }

    @Override
    public java.lang.String process_string(java.lang.Integer id, java.util.function.BiFunction<org.seasar.doma.jdbc.Config, org.seasar.doma.jdbc.PreparedSql, java.lang.String> handler) {
        __support.entering("org.seasar.doma.internal.apt.processor.dao.SqlProcessorDaoImpl", "process_string", id, handler);
        try {
            if (handler == null) {
                throw new org.seasar.doma.DomaNullPointerException("handler");
            }
            org.seasar.doma.jdbc.query.SqlProcessorQuery __query = __support.getQueryImplementors().createSqlProcessorQuery(__method1);
            __query.setMethod(__method1);
            __query.setConfig(__support.getConfig());
            __query.setSqlFilePath("META-INF/org/seasar/doma/internal/apt/processor/dao/SqlProcessorDao/process_string.sql");
            __query.addParameter("id", java.lang.Integer.class, id);
            __query.setCallerClassName("org.seasar.doma.internal.apt.processor.dao.SqlProcessorDaoImpl");
            __query.setCallerMethodName("process_string");
            __query.prepare();
            org.seasar.doma.jdbc.command.SqlProcessorCommand<java.lang.String> __command = __support.getCommandImplementors().createSqlProcessorCommand(__method1, __query, handler);
            java.lang.String __result = __command.execute();
            __query.complete();
            __support.exiting("org.seasar.doma.internal.apt.processor.dao.SqlProcessorDaoImpl", "process_string", __result);
            return __result;
        } catch (java.lang.RuntimeException __e) {
            __support.throwing("org.seasar.doma.internal.apt.processor.dao.SqlProcessorDaoImpl", "process_string", __e);
            throw __e;
        }
    }

    @Override
    public void process_void(java.lang.Integer id, java.util.function.BiFunction<org.seasar.doma.jdbc.Config, org.seasar.doma.jdbc.PreparedSql, java.lang.Void> handler) {
        __support.entering("org.seasar.doma.internal.apt.processor.dao.SqlProcessorDaoImpl", "process_void", id, handler);
        try {
            if (handler == null) {
                throw new org.seasar.doma.DomaNullPointerException("handler");
            }
            org.seasar.doma.jdbc.query.SqlProcessorQuery __query = __support.getQueryImplementors().createSqlProcessorQuery(__method2);
            __query.setMethod(__method2);
            __query.setConfig(__support.getConfig());
            __query.setSqlFilePath("META-INF/org/seasar/doma/internal/apt/processor/dao/SqlProcessorDao/process_void.sql");
            __query.addParameter("id", java.lang.Integer.class, id);
            __query.setCallerClassName("org.seasar.doma.internal.apt.processor.dao.SqlProcessorDaoImpl");
            __query.setCallerMethodName("process_void");
            __query.prepare();
            org.seasar.doma.jdbc.command.SqlProcessorCommand<java.lang.Void> __command = __support.getCommandImplementors().createSqlProcessorCommand(__method2, __query, handler);
            __command.execute();
            __query.complete();
            __support.exiting("org.seasar.doma.internal.apt.processor.dao.SqlProcessorDaoImpl", "process_void", null);
        } catch (java.lang.RuntimeException __e) {
            __support.throwing("org.seasar.doma.internal.apt.processor.dao.SqlProcessorDaoImpl", "process_void", __e);
            throw __e;
        }
    }

}
