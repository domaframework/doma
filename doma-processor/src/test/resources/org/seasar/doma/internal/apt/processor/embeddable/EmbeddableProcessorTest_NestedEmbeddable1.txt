package org.seasar.doma.internal.apt.processor.embeddable;

/** */
@javax.annotation.processing.Generated(value = { "Doma", "@VERSION@" }, date = "1970-01-01T09:00:00.000+0900")
@org.seasar.doma.EmbeddableTypeImplementation
public final class _NestedEmbeddable1 implements org.seasar.doma.jdbc.entity.EmbeddableType<org.seasar.doma.internal.apt.processor.embeddable.NestedEmbeddable1> {

    static {
        org.seasar.doma.internal.Artifact.validateVersion("@VERSION@");
    }

    private static final _NestedEmbeddable1 __singleton = new _NestedEmbeddable1();

    @Override
    public <ENTITY> java.util.List<org.seasar.doma.jdbc.entity.EntityPropertyType<ENTITY, ?>> getEmbeddablePropertyTypes(org.seasar.doma.internal.jdbc.entity.PropertyPath embeddedPropertyPath, Class<ENTITY> entityClass, org.seasar.doma.jdbc.entity.NamingType namingType, org.seasar.doma.jdbc.entity.EmbeddedType embeddedType) {
        return java.util.List.of(
            org.seasar.doma.internal.apt.processor.embeddable._NestedEmbeddable2.getSingletonInternal().getEmbeddablePropertyTypes(org.seasar.doma.internal.jdbc.entity.PropertyPath.combine(embeddedPropertyPath, new org.seasar.doma.internal.jdbc.entity.PropertyPathSegment.Default("nestedEmbeddable2")), entityClass, namingType, embeddedType),
            org.seasar.doma.internal.apt.processor.embeddable._NestedEmbeddable2.getSingletonInternal().getEmbeddablePropertyTypes(org.seasar.doma.internal.jdbc.entity.PropertyPath.combine(embeddedPropertyPath, new org.seasar.doma.internal.jdbc.entity.PropertyPathSegment.Optional("optionalNestedEmbeddable2", org.seasar.doma.internal.apt.processor.embeddable.NestedEmbeddable2.class)), entityClass, namingType, embeddedType)
        ).stream().flatMap(it -> it.stream()).toList();
    }

    @SuppressWarnings("unchecked")
    @Override
    public <ENTITY> org.seasar.doma.internal.apt.processor.embeddable.NestedEmbeddable1 newEmbeddable(String embeddedPropertyName, java.util.Map<String, org.seasar.doma.jdbc.entity.Property<ENTITY, ?>> __args) {
        return new org.seasar.doma.internal.apt.processor.embeddable.NestedEmbeddable1(
            (org.seasar.doma.internal.apt.processor.embeddable.NestedEmbeddable2)org.seasar.doma.internal.apt.processor.embeddable._NestedEmbeddable2.getSingletonInternal().newEmbeddable(embeddedPropertyName + ".nestedEmbeddable2", __args),
            java.util.Optional.ofNullable((org.seasar.doma.internal.apt.processor.embeddable.NestedEmbeddable2)org.seasar.doma.internal.apt.processor.embeddable._NestedEmbeddable2.getSingletonInternal().newEmbeddable(embeddedPropertyName + ".optionalNestedEmbeddable2", __args)));
    }

    /**
     * @return the singleton
     */
    public static _NestedEmbeddable1 getSingletonInternal() {
        return __singleton;
    }

    /** */
    public static final class Metamodel {

        private final java.util.List<org.seasar.doma.jdbc.criteria.metamodel.PropertyMetamodel<?>> __allPropertyMetamodels;

        public final org.seasar.doma.internal.apt.processor.embeddable._NestedEmbeddable2.Metamodel nestedEmbeddable2;

        public final org.seasar.doma.internal.apt.processor.embeddable._NestedEmbeddable2.Metamodel optionalNestedEmbeddable2;

        public Metamodel(org.seasar.doma.jdbc.entity.EntityType<?> entityType, String name) {
            this.nestedEmbeddable2 = new org.seasar.doma.internal.apt.processor.embeddable._NestedEmbeddable2.Metamodel(entityType, name + ".nestedEmbeddable2");
            this.optionalNestedEmbeddable2 = new org.seasar.doma.internal.apt.processor.embeddable._NestedEmbeddable2.Metamodel(entityType, name + ".optionalNestedEmbeddable2");
            java.util.List<org.seasar.doma.jdbc.criteria.metamodel.PropertyMetamodel<?>> __list = new java.util.ArrayList<>(2);
            __list.addAll(this.nestedEmbeddable2.allPropertyMetamodels());
            __list.addAll(this.optionalNestedEmbeddable2.allPropertyMetamodels());
            __allPropertyMetamodels = java.util.Collections.unmodifiableList(__list);
        }

        public java.util.List<org.seasar.doma.jdbc.criteria.metamodel.PropertyMetamodel<?>> allPropertyMetamodels() {
            return __allPropertyMetamodels;
        }

    }
}
